<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC 
   "-//OASIS//DTD DocBook XML V4.1.2//EN"
   "docbook/docbookx.dtd"[
<!ENTITY howto         "http://www.linuxdoc.org/HOWTO/">
<!ENTITY mini-howto    "http://www.linuxdoc.org/HOWTO/mini/">
]>
<article>
<articleinfo>
<title>Linux Man Page HOWTO</title>

<author>
  <firstname>Jens</firstname>
  <surname>Schweikhardt</surname>
  <affiliation>
    <orgname><ulink url="http://www.schweikhardt.net/">
    http://www.schweikhardt.net/</ulink></orgname>
    <address>
    <email><ulink url="mailto:howto@schweikhardt.net">howto at schweikhardt dot net</ulink></email>
    </address>
  </affiliation>
</author>
<copyright>
  <year>1995-2002</year>
</copyright>

  <revhistory>
     <revision>
	<revnumber>1.5</revnumber>
	<date>March 6 2001</date>
	<authorinitials>js</authorinitials>
	<revremark>
	  HTML source now passes <command>weblint -pedantic</command>.
	  <link linkend="q6">Paragraph 6:</link> Added workarounds for
 	  <application>tbl</application> screw-ups. Added appendices 
          <link linkend="acknowledgements">B)</link> and changelog.
	  Added RCS Id.
	</revremark>
     </revision>
     <revision>
	<revnumber>1.4</revnumber>
	<date>August 9 2001</date>
	<authorinitials>js</authorinitials>
	<revremark>
	  Howto put under a two clause BSD license.
	</revremark>
     </revision>
     <revision>
	<revnumber>1.3</revnumber>
	<date>August 20 2001</date>
	<authorinitials>js</authorinitials>
	<revremark>
	  Improved grammar. Use a numbered list for the TOC.
	</revremark>
     </revision>
     <revision>
	<revnumber>1.2</revnumber>
	<date>October 28 2001</date>
	<authorinitials>js</authorinitials>
	<revremark>
	  Added refs to mdoc(7), mdoc.samples(7) and groff_man(7).
	</revremark>
     </revision>
     <revision>
	<revnumber>1.1</revnumber>
	<date>April 28 2002</date>
	<authorinitials>js</authorinitials>
	<revremark>
	  Fix a grammar bogon by s/particular/particularly/.
	</revremark>
     </revision>
     <revision>
	<revnumber>1.0</revnumber>
	<date>April 30 2002</date>
	<authorinitials>js</authorinitials>
	<revremark>
	  Update the link to the groff_mdoc BSD tutorial.
	</revremark>
     </revision>
  </revhistory>

<abstract>
<para>This document describes the tools and conventions used for writing
man pages under Linux.</para> 
</abstract>
</articleinfo>
  
<sect1 id="introduction"><title>Introduction</title>

<para>See further information on <link linkend="copying">copying
conditions</link> below.</para>

<para>$Id$</para>

<para>The author's latest version is at <ulink
url="http://www.schweikhardt.net/man_page_howto.html">http://www.schweikhardt.net/man_page_howto.html</ulink>. Corrections
and suggestions welcome!  </para>

<para>This HOWTO explains what you should bear in mind when you are
going to write on-line documentation -- a so-called man page -- that
you want to make accessible via the <citerefentry>
<refentrytitle>man</refentrytitle> <manvolnum>1</manvolnum>
</citerefentry> command. Throughout this HOWTO, a manual entry is
simply referred to as a man page, regardless of actual length and
without sexist intention. </para>

</sect1>
<sect1 id="q1"><title>A few thoughts on documentation</title>

<para>Why do we write documentation? Silly question. Because we want
others to be able to use our program, library function or whatever we
have written and made available. But writing documentation is not all
there is to it: </para>

<itemizedlist>

<listitem><para>Documentation must be accessible. If it's hidden in
some non-standard place where the documentation-related tools won't
find it -- how can it serve its purpose?</para></listitem>

<listitem><para>Documentation must be reliable and accurate. There's
nothing more annoying than having program behaviour and documentation
disagree. Users will curse you, send you hate mail and throw your work
into the bit bucket, with the firm intent to never install anything
written by that jerk again.</para></listitem>
</itemizedlist>

<para>The historical and well known way documentation is accessed on
UNIX is via the man(1) command. This HOWTO describes what you have to
do to write a man page that will be correctly processed by the
documentation-related tools. The most important of these tools are
<citerefentry>
<refentrytitle>man</refentrytitle> <manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>xman</refentrytitle> <manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>makewhatis</refentrytitle> <manvolnum>8</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>catman</refentrytitle> <manvolnum>8</manvolnum>
</citerefentry>.
Reliability and accuracy of the
information are, of course, up to you. But even in this respect you will
find <link linkend="q9">some ideas below</link> that help you avoid some common
glitches. </para>
</sect1>

<sect1 id="xml"><title>Why not to write a man page!</title>

<para>Man pages will remain an important distribution format, but
nowadays there are good reasons to consider writing your documentation
masters in a richer, more Web-friendly format.  Many open-source
projects (including the Linux kernel, GNOME, KDE, FreeBSD, the Free
Software Foundation, and the Linux Documentation Project) have agreed
to use XML-DocBook as their preferred master format.</para>

<para>There are many good reasons for this, including the fact that
moving to XML will give you the ability to easily generate both HTML and
print output from the same masters.  Ultimately, moving to XML will
allow rich searching and indexing of documentation in ways that troff
markup cannot support.</para>

<para>Now that the <ulink
url="http://cyberelk.net/tim/xmlto/">xmlto</ulink> toolchain is
generally available (it shipped with Red Hat 7.3), producing man pages
with XML-DocBook is easy.  Write your page as a docbook
<sgmltag>RefEntry</sgmltag>.  You will then ve able to generate troff
markup from a document named <filename>foobar.xml</filename> with this
command:</para>

<programlisting>
bash$ xmlto man foobar.xml
</programlisting>

<para>Note that this gives you <application>troff</application> macro
source that can be installed in the man hierarchy just as though you
had written it by hand.  It is good practice to ship both the XML source
and the generated man page source with your distribution.</para>

<para>If you have an existing man page you want to convert up to an
XML <sgmltag>RefEntry</sgmltag>, that's also easy to do.  Please
consider converting your existing documentation with <ulink
url="http://www.catb.org/~esr/doclifter/">doclifter</ulink>.</para>

<para>Some of the good-practice guidelines we'll recommend below make
it easy for conversion tools like <application>doclifter</application>
to do their work, so that even if you choose to keep maintaining your
documentation as
<citerefentry>
<refentrytitle>man</refentrytitle><manvolnum>7</manvolnum>
</citerefentry>
sources, distribution-makers and othere will be
able to automatically translate it into something XML tools can work
on.</para>
</sect1>

<sect1><title>If you decide to write in man(7) format...</title>

<para>It's not 1978 any more, there are more devices in the world than
the now-extinct CAT phototypesetter <application>troff</application>
was designed for, and you don't really know which one your readers
will be using to view your page.  So it's much more important than it
used to be to write your man page structurally, and avoid trying to
pull visual tricks with low-level <application>troff</application>
requests.  They probably won't come out as you intended,
anyway &mdash; man page viewers and parsers often don't know how
to interpret those tricks.</para>

<para>Here are the safe requests:</para>

<table><title>The Good</title>
<tgroup cols="2" colsep="1" rowsep="1">
<tbody>
<row>
  <entry>.SH, .SS</entry>
  <entry>Section and subsection headers.  Safe as houses.</entry>
</row>
<row>
  <entry>.P, .PP</entry>
  <entry>New-paragraph macros.  Equally safe.</entry>
</row>
<row>
  <entry>.TP</entry>
  <entry>All-purpose tagged list construct.  Be careful what you 
	put after these; remember that <markup>.PP</markup> resets 
	the indent and ends the list.</entry>
</row>
<row>
  <entry>.UR, .UE, .UN</entry>
  <entry>Hyperlink macros.  Generally harmless when misinterpreted.</entry>
</row>
</tbody>
</tgroup>
</table>

<para>If you want to make your man page device-dependent and hard to
parse, here are some excellent way to accomplish that:</para>

<table><title>The Bad</title>
<tgroup cols="2" colsep="1" rowsep="1">
<tbody>
<row>
  <entry>.LP</entry>
  <entry>Synonym for <markup>.PP</markup>.  Historically, <markup>.LP</markup>
	had a slightly different effect on whitespace than 
	<markup>.PP</markup>, but the distinction is lost in modern
	versions.  Still, you never know where your page will be read,
 	nor with how archaic a version of the man macros....</entry>
</row>
<row>
  <entry>.RS, .RE</entry>
  <entry>Change relative indent.  Confuses the heck out of programs, 
	especially when it's intermingled with stuff like 
	<markup>.TP</markup>.  Avoid.</entry>
</row>
<row>
  <entry>.ta, .DT</entry>
  <entry>Troff-level tab set, and tab reset.  Dubious in a modern,
	multi-device environment where you can't necessarily predict 
	tab settings.</entry>
</row>
<row>
  <entry>.HP</entry>
  <entry>Hanging-indent macro.  Just messes with whitespace, so
	you don't actually know what the results will be on
	different devices.</entry>
</row>
<row>
  <entry>.PD</entry>
  <entry>Interparagraph-vertical-distance setting.  Almost guaranteed
	to be useless in a modern environment.  What's that going to mean
	on a web page, bunky?</entry>
</row>
<row>
  <entry>.IP</entry>
  <entry>Indented-paragraph macro. The two-argument version with a
	bullet is not completely useless, but consider using
	<markup>.TP</markup> instead.  It's easy to get confused
	and write the single-argument version, which
	only messes with indentation.</entry>
</row>
</tbody>
</tgroup>
</table>

<para>If you care about being friendly to XML translation,
it's also wise to stay away from using low-level
<application>troff</application> constructs like <markup>.br</markup>,
<markup>.in</markup> and <markup>.ti</markup> to tweak the whitespace
in your page layout.  The whitespace layout won't be preserved
anyway, and translator programs have a hard time interpreting these
structurally.</para>

<para>Finally, one bad construct we just can't get around using:</para>

<table><title>The Ugly</title>
<tgroup cols="2" colsep="1" rowsep="1">
<tbody>
<row>
  <entry>.nf, .fi</entry>
  <entry>The stop-filling and start-filling macros.  Necessary
	because stock man(7) doesn't have anything like Ultrix's
	<markup>.EX</markup>/<markup>.EE</markup> or mm's
	<markup>.DS</markup>/<markup>.DE</markup> for unfilled
	displays (like program listings and command examples).</entry>
</row>
</tbody>
</tgroup>
</table>
</sect1>

<para>There is more about good use of font macros <link linkend="q8">
later in the document</link>.</para>

<sect1 id="q2"><title>How are man pages accessed?</title>

<para>You need to know the precise mechanism for acccessing man pages in
order to give your man page the right name and install it in the right
place. Each man page should be categorized in a specific section, denoted by
a single character. The most common sections under Linux, and their human
readable names, are: </para>

<informaltable>
<tgroup cols="2" colsep="1" rowsep="1">
<thead>
<row>
  <entry>Section</entry>
  <entry>The human readable name</entry></row>
</thead>
<tbody>
<row>
  <entry>1</entry>
  <entry>User commands that may be started by everyone.</entry></row>
<row>
  <entry>2</entry>
  <entry>System calls, that is, functions provided by the kernel.</entry>
</row>
<row>
  <entry>3</entry>
  <entry>Subroutines, that is, library functions.</entry>
</row>
<row>
  <entry>4</entry>
  <entry>Devices, that is, special files in the /dev directory.</entry>
</row>
<row>
  <entry>5</entry>
  <entry>File format descriptions, e.g. /etc/passwd.</entry>
</row>
<row>
  <entry>6</entry>
  <entry>Games, self-explanatory.</entry>
</row>
<row>
  <entry>7</entry>
  <entry>Miscellaneous, e.g. macro packages, conventions.</entry>
</row>
<row>
  <entry>8</entry>
  <entry>System administration tools that only root can execute.</entry>
</row>
<row>
  <entry>9</entry>
  <entry>Another (Linux specific) place for kernel routine documentation.</entry>
</row>
<row>
  <entry>n</entry>
  <entry>(Deprecated) New documentation, that may be moved to a more appropriate section.</entry>
</row>
<row>
  <entry>o</entry>
  <entry>(Deprecated) Old documentation, that may be kept for a grace period.</entry>
</row>
<row>
  <entry>l</entry>
  <entry>(Deprecated) Local documentation referring to this particular system.</entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>The name of the man page's source file (the input to the
formatting system) is the name of the command, function or file name,
followed by a dot, followed by the section character. If you write the
documentation on the format of the <filename>passwd</filename> file
you have to name the source file `passwd.5'. Here we also have an
example of a file name that is the same as a command name.  There
might be even a library subroutine named passwd. Sectioning is the
usual way to resolve these ambiguities: The command description is
found in the file `passwd.1' and the hypothetical library subroutine
in `passwd.3'.</para>

<note><para>Sometimes additional characters are appended and the file name
looks for example like `xterm.1x' or `wish.1tk'. The intent is to
indicate that this is documentation for an X Window program or a Tk
application, respectively. Some manual browsers can make use of this
additional information.  For example xman will use `xterm(x)' and
`wish(tk)' in the list of available documentation.</para></note>

<para>Please don't use the n, o and l sections; according to the File
System Standard these sections are deprecated. Stick to the numeric
sections.  Beware of name clashes with existing programs, functions or
file names.  It is certainly a bad idea to write yet another editor
and call it ed, sed (for smart ed) or red (for Rocky's ed). By making
sure your program's name is unique, you avoid having someone execute
your program but read someone else's man page, or vice versa. Checking
out the <ulink url="http://www.execpc.com/lsm/">Linux Software
Map</ulink> (LSM) database on a program name is a place to start
ensuring name uniqueness. </para>

<para>Now we know the name to give our file. The next decision is the
directory in which it will finally be installed (say, when the user
runs `<command>make install</command>' for your package.) On Linux,
all man pages are below directories listed in the environment variable
<envar>MANPATH</envar>. The doc-related tools use
<envar>MANPATH</envar> in the same way the shell uses PATH to locate
executables. In fact, <envar>MANPATH</envar> has the same format as
PATH. Each contains a colon-separated list of directories (with the
exception that <envar>MANPATH</envar> does not allow empty fields
and relative pathnames -- it uses absolute names only.) If
<envar>MANPATH</envar> is not set or not exported, a default will be
used that contains at least the /usr/man directory. To speed up the
search and to keep directories small, the directories specified by
<envar>MANPATH</envar> (the so-called base directories) contain a
bunch of subdirectories named `man&lt;s&gt;' where &lt;s&gt; stands
for the one-character section designator introduced in the <link
linkend="q2">table above</link>. Not all of the sections may be
represented by a subdirectory because there simply is no reason to
keep an empty `mano' subdirectory. However, there may be directories
named `cat&lt;s&gt;', `dvi&lt;s&gt;' and `ps&lt;s&gt;' which hold
documentation that is ready to display or print. More on this
later. The only other file in any base directory should be a file
named `whatis'. The purpose and creation of this file will also be
described under <link linkend="q12">paragraph 12</link>. The safest
way to have a man page for section &lt;s&gt; installed in the right
place is to put it in the directory /usr/man/man&lt;s&gt;. A good
<filename>Makefile</filename>, however, will allow the user to chose
a base directory, by means of a <application>make</application> variable,
<envar>MANDIR</envar>, say. Most of the GNU packages can be
configured with the <command>--prefix=/what/ever</command> option.
The manuals will then be installed under the base directory
<filename>/what/ever/man</filename>.  I suggest you also provide a way
to do something similar. </para>

<para>With the advent of the <ulink
url="ftp://tsx-11.mit.edu/pub/linux/docs/linux-standards/fsstnd/">Linux
File System Standard</ulink> (FS-Stnd), things became more
complicated. The FS-Stnd 1.2 states that </para>

<itemizedlist>
<listitem><para>"Provisions must be made in the structure of /usr/man
to support manual pages which are written in different (or multiple)
languages."</para></listitem>
</itemizedlist>

<para>This is achieved by introducing another directory level that
distinguishes between different languages. Quoting again from FS-Stnd
1.2: </para>

<itemizedlist>
<listitem><para>"This naming of language subdirectories of /usr/man is
based on Appendix E of the POSIX 1003.1 standard which describes the
locale identification string -- the most well accepted method to
describe a cultural environment.  The &lt;locale&gt; string is:
&lt;language&gt;[_&lt;territory&gt;][.&lt;character-set&gt;][,&lt;version&gt;]"</para></listitem>
</itemizedlist>

<para>(See the FS-Stnd for a few common &lt;locale&gt; strings.)
According to these guidelines, we have our man pages in
<filename>/usr/man/&lt;locale&gt;/man[1-9lno]</filename>.  The
formatted versions should then be in
<filename>/usr/man/&lt;locale&gt;/cat[1-9lno]</filename> of course,
otherwise we could only provide them for a single locale. <emphasis
role="strong">However</emphasis>, I can not recommend switching to
that structure at this time. The FS-Stnd 1.2 also allows that </para>

<itemizedlist>
<listitem><para>"Systems which use a unique language and code set for
all manual pages may omit the &lt;locale&gt; substring and store all
manual pages in &lt;mandir&gt;. For example, systems which only have
English manual pages coded with ASCII, may store manual pages (the
man[1-9] directories) directly in /usr/man. (That is the
traditional circumstance and arrangement in fact.)"</para></listitem>
</itemizedlist>

<para>I would not switch until all tools (like xman, tkman, info and many
others that read man pages) can cope with the new structure.</para>
</sect1>

<sect1 id="q3"><title>How should a formatted man page look?</title>

<para>Let me present you an example. Below I will explain it in
detail. If you read this as plain text it won't show the different
typefaces (<emphasis role="strong">bold</emphasis>and
<emphasis>italics</emphasis>). Please refer to the paragraph <link
linkend="q8">What are the font conventions?</link> for further
explanations. Here comes the man page for the (hypothetical)
<application>foo</application> program. </para>

<literallayout>
FOO(1)                     User Manuals                    FOO(1)



<emphasis role="strong">NAME
</emphasis>     foo - frobnicate the bar library

<emphasis role="strong">SYNOPSIS
</emphasis>     <emphasis role="strong">foo [-bar] [-c</emphasis> <emphasis>config-file</emphasis> <emphasis role="strong">]</emphasis> <emphasis>file</emphasis> <emphasis role="strong">...

DESCRIPTION
</emphasis>     <emphasis role="strong">foo</emphasis>  frobnicates the bar library by tweaking internal symbol
     tables. By default it parses all baz segments and rearranges
     them  in  reverse  order  by time for the <emphasis role="strong">xyzzy</emphasis>(1) linker to
     find them. The symdef entry is then compressed using the WBG
     (Whiz-Bang-Gizmo) algorithm.  All files are processed in the
     order specified.

<emphasis role="strong">OPTIONS
</emphasis>     -b   Do not write `busy' to stdout while processing.

     -c config-file
          Use the alternate system wide  <emphasis>config-file</emphasis>  instead  of
          <emphasis>/etc/foo.conf</emphasis>.   This overrides any <emphasis role="strong">FOOCONF</emphasis> environment
          variable.

     -a   In addition to the baz segments, also parse the  blurfl
          headers.

     -r   Recursive  mode.  Operates  as fast as lightning at the
          expense of a megabyte of virtual memory.

<emphasis role="strong">FILES
</emphasis>     <emphasis>/etc/foo.conf
</emphasis>          The system wide configuration file. See <emphasis role="strong">foo</emphasis>(5) for fur-
          ther details.
     <emphasis>~/.foorc
</emphasis>          Per  user  configuration  file.  See <emphasis role="strong">foo</emphasis>(5) for further
          details.

<emphasis role="strong">ENVIRONMENT
</emphasis>     FOOCONF
          If non-null the full pathname for an  alternate  system
          wide <emphasis>foo.conf</emphasis>.  Overridden by the -c option.

<emphasis role="strong">DIAGNOSTICS
</emphasis>     The following diagnostics may be issued on stderr:

     Bad magic number.
          The input file does not look like an archive file.
     Old style baz segments.
          foo  can  only  handle  new  style  baz segments. COBOL
          object libraries are not supported in this version.

<emphasis role="strong">BUGS
</emphasis>     The command name should have been chosen more  carefully  to
     reflect its purpose.

<emphasis role="strong">AUTHOR
</emphasis>     Jens Schweikhardt <ulink url="mailto:howto@schweikhardt.net">&lt;howto at schweikhardt dot net&gt;</ulink>
<emphasis role="strong">SEE ALSO
</emphasis>     <emphasis role="strong">bar</emphasis>(1), <emphasis role="strong">foo</emphasis>(5), <emphasis role="strong">xyzzy</emphasis>(1)

Linux                Last change: MARCH 1995                    2



</literallayout>

<para>So how exactly did you generate that man page? I expected that
question, here's the source, Luke:</para>

<programlisting>
.\" Process this file with
.\" groff -man -Tascii foo.1
.\"
.TH FOO 1 "MARCH 1995" Linux "User Manuals"
.SH NAME
foo \- frobnicate the bar library
.SH SYNOPSIS
.B foo [-bar] [-c
.I config-file
.B ]
.I file
.B ...
.SH DESCRIPTION
.B foo
frobnicates the bar library by tweaking internal
symbol tables. By default it parses all baz segments
and rearranges them in reverse order by time for the
.BR xyzzy (1)
linker to find them. The symdef entry is then compressed
using the WBG (Whiz-Bang-Gizmo) algorithm.
All files are processed in the order specified.
.SH OPTIONS
.IP -b
Do not write `busy' to stdout while processing.
.IP "-c config-file"
Use the alternate system wide
.I config-file
instead of
.IR /etc/foo.conf .
This overrides any
.B FOOCONF
environment variable.
.IP -a
In addition to the baz segments, also parse the
blurfl headers.
.IP -r
Recursive mode. Operates as fast as lightning
at the expense of a megabyte of virtual memory.
.SH FILES
.I /etc/foo.conf
.RS
The system wide configuration file. See
.BR foo (5)
for further details.
.RE
.I ~/.foorc
.RS
Per user configuration file. See
.BR foo (5)
for further details.
.SH ENVIRONMENT
.IP FOOCONF
If non-null the full pathname for an alternate system wide
.IR foo.conf .
Overridden by the
.B -c
option.
.SH DIAGNOSTICS
The following diagnostics may be issued on stderr:
 
Bad magic number.
.RS
The input file does not look like an archive file.
.RE
Old style baz segments.
.RS
.B foo
can only handle new style baz segments. COBOL
object libraries are not supported in this version.
.SH BUGS
The command name should have been chosen more carefully
to reflect its purpose.
.SH AUTHOR
Jens Schweikhardt &lt;howto at schweikhardt dot net&gt;
.SH "SEE ALSO"
.BR bar (1),
.BR foo (5),
.BR xyzzy (1)
</programlisting>

<para>Here's the explanation as I promised. </para>

<sect2 id="NAME"><title>The NAME section</title>

<para>...is the only required section. Man pages without a name
section are as useful as refrigerators at the north pole. This section
also has a standardized format consisting of a comma-separated list of
program or function names, followed by a dash, followed by a short
(usually one line) description of the functionality the program (or
function, or file) is supposed to provide. By means of
<application>makewhatis</application>(8), the name sections make it
into the <application>whatis</application> database files.
<application>Makewhatis</application> is the reason the name section
must exist, and why it must adhere to the format I described. In the
<application>groff</application> source it must look like:</para>

<programlisting>
.SH NAME foo \- frobnicate the bar library 
</programlisting>

<para>The \- is of importance here. The backslash is needed to make the dash
distinct from a hyphenation dash that may appear in either the command
name or the one line description. </para>

<para id="no_multiple_NAME_lines">Please do not make more than one of
these name lines.  Some people have done this on man pages that
document multiple closely related commands, but it's not a good idea.
Linux <citerefentry>
<refentrytitle>makewhatis</refentrytitle><manvolnum>8</manvolnum>
</citerefentry> indexes on words found in DESCRIPTION and INTRODUCTION
sections as well as the NAME line, so as long as you put your key word
somewhere in that text you'll get the same effect.  And <citerefentry>
<refentrytitle>apropos</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> only display the first description line anyway.
Finally multiple name/description lines cannot be automatically
translated to <sgmltag>RefEntry</sgmltag> format, which permits
multiple names but only one description.  So, if you're tempted to
write something like:</para>

<programlisting>
.SH NAME
mzip2, munzip2 \- a magic file compressor
.br
mzcat \- decompresses files to stdout
.br
mzip2recover \- recovers data from damaged mzip2 files
</programlisting>

<para>please do this instead:</para>

<programlisting>
.SH NAME
mzip2, munzip2, mzcat, mzip2recover \- file compression and decompression tools
.SH DESCRIPTION
.I mzcat 
decompresses files to stdout
.PP
.I mzip2recover
recovers data from damaged mzip2 files
</programlisting>

</sect2>
<sect2><title>The SYNOPSIS section</title>

<para>...is intended to give a short overview of available program options.
For functions this sections lists corresponding include files and the prototype
so the programmer knows the type and number of arguments as well as the
return type.</para>

<para>When writing command synopses, remember the standard
notation:</para>

<informaltable>
<tgroup cols="2" colsep="1" rowsep="1">
<thead>
<row>
  <entry>Notation:</entry>
  <entry>Meaning</entry></row>
</thead>
<tbody>
<row>
  <entry> arg...</entry>
  <entry>Required argument, can be repeated any number of times.  Please don't
	use "arg+" for this!</entry>
</row>
<row>
  <entry>[ arg ]</entry>
  <entry>Optional argument &mdash; may be omitted</entry>
</row>
<row>
  <entry>[ arg... ]</entry>
  <entry>Optional argument &mdash; may be omitted, but can be repeated any
	number of times.  Please don't write "[arg]..." or "arg*" for
        this!</entry>
</row>
<row>
  <entry>[ arg1 | arg2 | ... argn ]</entry>
  <entry>Any one of these options, optionally</entry>
</row>
<row>
  <entry>{ arg1 | arg2 | ... argn }</entry>
  <entry>Any one of these options, but at least one in the group
	is required. Please don't write this with parens, 
	rather than set braces!</entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>If you have a program with a bunch of single-character options,
please avoid writing the synopsis in the old terse Bell Labs style, 
e.g:</para>

<programlisting>
doclifter [ -qhsvx ] file...
</programlisting>

<para>This is too easily confused with the newer X-style keyword
option like -geometry (which is why it's GNU practice to lead long
options with a double dash).  For the benefit of programs that
actually parse command-synopsis notation, it is better to be more
explicit:</para>

<programlisting>
doclifter [ -q ] [ -h ] [ -s ] [ -v ] [ -x ] file...
</programlisting>

<para>Please don't include running test in this section.  E.g. rather
than this:</para>

<programlisting>
.SH SYNOPSIS
.TP
.B ddd
.RB "[\|" \-\-help "\|]"
.RB "[\|" \-\-gdb "\|]"
.RB "[\|" \-\-dbx "\|]"
.TP
but usually just
.TP
.B ddd
.I program
</programlisting>

<para>write this:</para>

<programlisting>
.SH SYNOPSIS
.TP
.B ddd
.RB "[\|" \-\-help "\|]"
.RB "[\|" \-\-gdb "\|]"
.RB "[\|" \-\-dbx "\|]"
.SH USAGE
This program is usually just invoked as
.B ddd
.I program
</programlisting>

<para>DocBook has a markup sub-language for describing command
synopses that unfortunately doesn't have a way to describe text
annotations. Tools like <application>doclifter</application> that
try to translate man pages to DocBook cannot automatically know
what to do with such annotations.</para>

<para>If you're writing a description of C function entry points
to a library, there are two style guidelines to keep in mind:</para>

<para>First, put any struct declarations, typedefs, and externs of
variables <emphasis>before</emphasis> the function entry point 
declarations, rather than after (just as you would in a program).</para>

<para>Second, use ANSI C prototype syntax rather than K&amp;R.  That is,
instead of this:</para>

<programlisting>
int foo(ptr)
char *ptr;
</programlisting>

<para>write this:</para>

<programlisting>
int foo(char *ptr);
</programlisting>

<para>just as the function would appear in a modern header file.</para>

</sect2>
<sect2><title>The DESCRIPTION section</title>

<para>...eloquently explains why your sequence of 0s and 1s is worth
anything at all. Here's where you write down all your knowledge. This
is the Hall Of Fame. Win other programmers' and users' admiration by
making this section the source of reliable and detailed
information. Explain what the arguments are for, the file format, what
algorithms do the dirty jobs.</para>

</sect2>
<sect2><title>The OPTIONS section</title>

<para>...gives a description of how each command-line option affects
program behaviour.  You knew that, didn't you? If your program is
simple enough, this information may be folded into the DESCRIPTION
section.</para>

</sect2>
<sect2><title>The FILES section</title>

<para>...lists files the program or function uses. For example, it
lists configuration files, startup files, and files the program
directly operates on. It is a good idea to give the full pathname of
these files and to make the install process modify the directory part
to match user preferences: the <application>groff</application> manuals have a
default prefix of /usr/local, so they reference
<filename>/usr/local/lib/groff/*</filename> by default.  However, if
you install using <command>make prefix=/opt/gnu</command> the
references in the man page change to
<filename>/opt/gnu/lib/groff/*</filename>.</para>

</sect2>
<sect2><title>The ENVIRONMENT section</title>

<para>...lists all environment variables that affect your program or function
and tells how, of course. Most commonly the variables will hold pathnames,
filenames or default options. </para>

</sect2>
<sect2><title>The DIAGNOSTICS section</title>

<para>...should give an overview of the most common error messages
from your program and how to cope with them. There's no need to
explain system error error messages (from <citerefentry>
<refentrytitle>perror</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>) or fatal signals (from <citerefentry>
<refentrytitle>psignal</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>) as they can appear during execution of any
program. </para>

</sect2>
<sect2><title>The BUGS section</title>

<para>...should ideally be non-existent. If you're brave, you can describe
here the limitations, known inconveniences and features that others may regard
as misfeatures. If you're not so brave, rename it the TO DO section ;-)
</para>

</sect2>
<sect2><title>The AUTHOR section</title>

<para>...is nice to have in case there are gross errors in the documentation
or program behaviour (Bzzt!) and you want to mail a bug report. </para>

</sect2>
<sect2><title>The SEE ALSO section</title>

<para>...is a list of related man pages in alphabetical order. Conventionally,
it is the last section. You are free to invent other sections if they really
don't fit in one of those described so far.</para>

</sect2>
</sect1>
<sect1 id="q4"><title>How do I document several programs/functions
in a single man page?</title>

<para>Many programs (<application>grep</application>,
<application>egrep</application>) and functions (<function>printf</function>,
<function>fprintf</function>, ...) are documented in a single man
page. However, these man pages would be quite useless if they were
only accessible under one name. We cannot expect a user to remember
that the <application>egrep</application> man page is actually the
<application>grep</application> man page. It is therefore necessary to have
the man page available under different names. You have several
possibilities to achieve this: </para>

<orderedlist>
<listitem><para>have identical copies for each name.</para></listitem>
<listitem><para>connect all man pages using hard links.</para></listitem>
<listitem><para>symbolic links pointing to the actual man
page.</para></listitem>
<listitem><para>use <application>groff</application>'s `source' mechanism provided
by the <markup>.so</markup> macro.</para></listitem>
</orderedlist>

<para>The first way is obviously a waste of disk space. The second is
not recommended because intelligent versions of the
<application>catman</application> program can save a lot of work by looking at
the the file type or contents. Hard links will prevent
<application>catman</application> from being clever. (Note that
<application>catman</application>'s purpose is to format all man pages so they
can be displayed quickly.) The third alternative has a slight
drawback: if flexibility is a concern, you have to be aware that there
are file systems that do not support symbolic links. The upshot of
this is that the Best Thing (TM) is using <application>groff</application>'s
source mechanism.  Here's how to do it: If you want to have your man
page available under the names `foo' and `bar' in section 1, then put
the man page in foo.1 and have bar.1 look like this: </para>

<programlisting>
.so man1/foo.1
</programlisting>

<para>It is important to specify the <filename>man1/</filename>
directory part as well as the file name `foo.1' because when
<application>groff</application> is run by the browser it will have
the manual base directory as its current working directory (cwd) and
<application>groff</application> interprets <markup>.so</markup> arguments
relative to the cwd. </para>

</sect1>
<sect1 id="q5"><title>Which macro package should I use?</title>

<para>There are a number of macro packages especially designed for use
in writing man pages. Usually they are in the groff macro directory
<filename>/usr/lib/groff/tmac</filename>.  The file names are
<filename>tmac.&lt;something&gt;</filename>, where &lt;something&gt;
is the argument to groff's -m option. Groff will use
<filename>tmac.&lt;something&gt;</filename> when it is given the
`<option>-m</option> &lt;something&gt;' option. Often the blank
between `<option>-m</option>' and `&lt;something&gt;' is omitted so we
may say `<command>groff -man</command>' when we are formatting man
pages using the <filename>tmac.an </filename> macro package. That's
the reason for the strange name `tmac.an'. Besides tmac.an there is
another popular macro package, <filename>tmac.doc</filename>, which
originated at the University of California at Berkeley. Many BSD man
pages use it and it seems that UCB has made it its standard for
documentation.  The <filename>tmac.doc</filename> macros are much more
flexible but alas, there are manual browsers that will not use them
but always call <command>groff -man</command>.  For example, all
<application>xman</application> programs I have seen will screw up on man
pages requiring <filename>tmac.doc</filename>. So do yourself a favor:
use <filename>tmac.an</filename> -- use of any other macro package is
considered harmful. <filename>tmac.andoc </filename>is a pseudo macro
package that takes a look at the source and then loads either
<filename>tmac.an</filename> or
<filename>tmac.doc</filename>. Actually, any man page browser should
use it but to this point, not all of them do, so it is best we cling
to ye olde <filename>tmac.an</filename>. Anything I tell you from now
on and concerning macros only holds true for
<filename>tmac.an</filename>. If you want to use the
<filename>tmac.doc</filename> macros anyway, here is a pointer to
detailed information on how to use them: <ulink
url="http://www.freebsd.org/cgi/man.cgi">http://www.FreeBSD.org/cgi/man.cgi</ulink>.
There is a searchable index form on the page. Enter
<filename>groff_mdoc</filename> and it will find you
<citerefentry>
<refentrytitle>groff_mdoc</refentrytitle> <manvolnum>7</manvolnum>
</citerefentry>,
a tutorial sampler for writing BSD man
pages. Some distros (I'm told) also come with 
<citerefentry>
<refentrytitle>mdoc</refentrytitle><manvolnum>7</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>mdoc_samples</refentrytitle><manvolnum>7</manvolnum>
</citerefentry>,
and
<citerefentry>
<refentrytitle>groff_man</refentrytitle> <manvolnum>7</manvolnum>
</citerefentry>.
</para>

<para>The definitive dope for <application>troff</application>, with all
macros explained, is the <citetitle>Troff User's Manual</citetitle>,
available as <ulink
url="http://cm.bell-labs.com/sys/doc/troff.html">html</ulink>, <ulink
url="http://cm.bell-labs.com/sys/doc/troff.ps">PostScript (ps,
760K)</ulink> or <ulink
url="http://cm.bell-labs.com/sys/doc/troff.pdf">Portable Document
Format (pdf, 240K)</ulink>.  by Jospeh F. Ossanna and Brian
W. Kernighan, revised November 1992.  AT&amp;T Bell Labs have made it
publicly available.  Don't forget to check out the late great <ulink
url="http://www.kohala.com/start/">W. Richard Steven's homepage</ulink>
(famous for <citetitle>Unix Network Programming</citetitle> as well as the
<emphasis>TCP/IP Illustrated</emphasis> trilogy), who also has a list of <ulink
url="http://www.kohala.com/start/troff/troff.html">Troff
Resources</ulink> including <application>tbl</application>,
<application>eqn</application>, <application>pic</application> and other filters.</para>

</sect1>
<sect1 id="q6"><title>What preprocessors may I use? </title>

<para>Groff comes with at least three preprocessors,
<application>tbl</application>, <application>eqn</application>, and
<application>pic</application> (on some systems they are named
<application>gtbl</application>, <application>geqn</application> and
<application>gpic</application>.) Their purpose is to translate preprocessor
macros and their data to regular troff input. <application>Tbl</application>
is a table preprocessor, <application>eqn</application> is an equations/maths
preprocessor and <application>pic</application> is a picture
preprocessor. Please refer to the man pages for more information on
what functionality they provide. To put it in a nutshell: don't write
man pages requiring <emphasis>any</emphasis> preprocessor. Eqn will
generally produce terrible output for typewriter-like devices,
unfortunately the type of device 99% of all man pages are viewed on
(well, at least I do). For example, XAllocColor.3x uses a few formulas
with exponentiation. Due to the nature of typewriter-like devices, the
exponent will be on the same line as the base. N to the power of two
appears as `N2'.  <application>Tbl</application> should be avoided because all
xman programs I have seen fail on them. Xman 3.1.6 uses the following
command to format man pages, e.g. 
<citerefentry>
<refentrytitle>signal</refentrytitle> <manvolnum>7</manvolnum>
</citerefentry>:</para>

<programlisting>
gtbl /usr/man/man7/signal.7 | geqn | gtbl |  \
		groff -Tascii -man /tmp/xmana01760 2&gt; /dev/null
</programlisting>

<para>which screws up for sources using <application>gtbl</application>,
because <application>gtbl</application> output is fed again into
<application>gtbl</application>. The effect is a man page without your
table. I don't know if it's a bug or a feature that
<application>gtbl</application> chokes on its own output or if xman could be a
little smarter and not use <application>gtbl</application> twice. Furthermore,
some systems use <application>grog</application> to determine what options to
pass to groff. Unfortunately grog sometimes guesses wrong and
recommends <command>groff -t</command> when in fact
<application>tbl</application> must not be used.</para>

<para>We are basically left with two workarounds for tables:</para>

<orderedlist>
<listitem><para>Format the table yourself manually and put it between .nf and
.fi lines so that it will be left unformatted. You won't have bold and
italics this way but this beats having your table swallowed any
day.</para></listitem>

<listitem><para>Use any <application>tbl</application> macros you like but
distribute the <application>tbl</application> output instead of the
input. There is however this quirk with <application>grog</application> who
thinks that any file containing a line starting with
<markup>.TS</markup> requires <application>tbl</application>.
<application>Tbl</application> output for some reason unbeknownst to me still
contains <markup>.TS</markup> and <markup>.TE</markup>. It seems you
can simply remove them and have the result still look okay. YMMV, so
please test this with your particular man
page.</para></listitem></orderedlist>

<para>I have yet to see a man page requiring
<application>pic</application> preprocessing. But I would not like
it. As you can see above, <application>xman</application> will not use
it and <application>groff</application> will certainly do the funky
wadakiki on the input.</para>

</sect1>
<sect1 id="q7"><title>Should I distribute source and/or
already formatted documentation?</title>

<para>Let me give the pros and cons of a few selected
possibilities:</para>

<variablelist>
<varlistentry>
<term>Source only:</term>
<listitem>
<itemizedlist>
  <listitem>
    <para><emphasis>Pro:</emphasis> smaller distribution package.</para>
  </listitem>
  <listitem>
    <para><emphasis>Con:</emphasis> inaccessible on systems without 
    <application>groff</application>.</para>
  </listitem>
</itemizedlist>
</listitem>
</varlistentry>

<varlistentry>
<term>Uncompressed formatted only:</term>
<listitem>
<itemizedlist>
  <listitem>
    <para><emphasis>Pro:</emphasis> accessible even on systems without
    <application>groff</application>. </para>
  </listitem>
  <listitem>
    <para><emphasis>Con:</emphasis> the user can't generate a dvi or
    postscript file. </para>
  </listitem>
  <listitem>
    <para><emphasis>Con:</emphasis> waste of disk space on systems that
    also handle compressed pages.</para>
  </listitem>
</itemizedlist>
</listitem>
</varlistentry>

<varlistentry>
<term>Compressed formatted only: </term>
<listitem>
<itemizedlist>
  <listitem>
    <para><emphasis>Pro:</emphasis> accessible even on systems 
    without <application>groff</application>. </para>
  </listitem>
  <listitem>
    <para><emphasis>Con:</emphasis> the user can't generate a dvi
    or postscript file. </para>
  </listitem>
  <listitem>
    <para><emphasis>Con:</emphasis> which compression format would you use? 
    .Z? .z? .gz? All of them?</para>
  </listitem>
</itemizedlist>
</listitem>
</varlistentry>

<varlistentry>
<term>Source and uncompressed formatted:</term>
<listitem>
<itemizedlist>
  <listitem>
    <para><emphasis>Pro:</emphasis> accessible even on systems without 
    <application>groff</application>.</para>
  </listitem>
  <listitem>
    <para><emphasis>Con:</emphasis> larger distribution package</para>
  </listitem>
  <listitem>
    <para><emphasis>Con:</emphasis> some systems may expect compressed
    formatted man pages.</para>
  </listitem>
  <listitem>
    <para><emphasis>Con:</emphasis> redundant information on systems equipped
    with <application>groff</application>.</para>
  </listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>

<para>IMHO it is best to distribute source only. The argument that
it's inaccessible on systems without <application>groff</application> does not
matter. The 500+ man pages of the Linux Documentation Project are
source only. The man pages of XFree86 are source only. The man pages
from the FSF are source only. In fact, I have rarely seen software
distributed with formatted man pages. If any sysadmin is really
concerned about having man pages accessible then he also has
<application>groff</application> installed.</para>

</sect1>
<sect1 id="q8"><title>What are the font conventions?</title>

<para>First of all: don't use direct font operators like <markup>\fB</markup>,
<markup>\fP</markup> etc. Use macros which take arguments. This way you
avoid a common glitch: forgetting the font change at the end of the word
and having the bold or italic extend up to the next font change. Believe
me, it happens more often than you think. The <filename>tmac.an</filename>
macros provide the following type faces: </para>

<informaltable>
<tgroup cols="2" colsep="1" rowsep="1">
<tbody>
  <row><entry>B</entry>  <entry>Bold</entry></row>
  <row><entry>BI</entry> <entry>Bold alternating with italics</entry></row>
  <row><entry>BR</entry> <entry>Bold alternating with Roman </entry></row>
  <row><entry>I</entry>  <entry>Italics</entry></row>
  <row><entry>IB</entry> <entry>Italics alternating with bold</entry></row>
  <row><entry>IR</entry> <entry>Italics alternating with Roman</entry></row>
  <row><entry>RB</entry> <entry>Roman alternating with bold</entry></row>
  <row><entry>RI</entry> <entry>Roman alternating with italics</entry></row>
  <row><entry>SM</entry> <entry>Small (scaled 9/10 of the regular size)</entry></row>
  <row><entry>SB</entry> <entry>Small bold (<emphasis>not</emphasis>
                         small alternating with bold)</entry></row>
</tbody>
</tgroup>
</informaltable>

<para>X alternating with Y means that the odd arguments are typeset in X while
the even arguments are typeset in Y. For example </para>

<programlisting>
.BI "Arg 1 is Bold, " "Arg 2 is Italics, " "and= Bold, " "and Italics."
</programlisting>

<para>The double quotes are needed to include white space into an argument;
without them, no white space appears between the alternating typefaces.
In fact, you'll only need the macros for alternating typefaces in
cases where you <emphasis>want</emphasis>
to avoid white space between typeface changes.
So much for what's available. Here's how you should make use of the different
typefaces: (portions shamelessly stolen from man(7)) </para>

<para>Although there are many arbitrary conventions for man pages in the UNIX
world, the existence of several hundred Linux-specific man pages defines
our standards: For functions, the arguments are always specified using
italics, even in the SYNOPSIS section, where the rest of the function is
specified in bold: </para>

<programlisting>
<para>.BI "myfunction(int " argc ", char **" argv ); </para>
</programlisting>

<para>Filenames are always in italics, except in the SYNOPSIS section, where
included files are in bold. So you should use </para>

<programlisting>
.I /usr/include/stdio.h
</programlisting>

<para>and</para>

<programlisting>
.B #include &lt;stdio.h&gt;
</programlisting>

<para>Special macros, which are usually in upper case, are in bold: </para>

<programlisting>
.B MAXINT
</programlisting>

<para>When enumerating a list of error codes, the codes are in
bold. This list usually uses the <markup>.TP</markup> (paragraph with
hanging tag) macro as follows: </para>

<programlisting>
.TP
.B EBADF
.I fd is not a valid file descriptor.
.TP 
.B EINVAL 
.I fd is unsuitable for reading 
</programlisting>

<para>Any reference to another man page (or to the subject of the current
man page) is in bold. If the manual section number is given, it is given
in Roman, without any spaces: </para>

<programlisting>
.BR man (7)
</programlisting>

<para>Acronyms look best when typeset in small-caps type face. So I
recommend </para>

<itemizedlist>
<para>.SM UNIX </para>
<para>.SM ASCII</para>
<para>.SM TAB </para>
<para>.SM NFS</para>
<para>.SM LALR(1)</para>
</itemizedlist>
</sect1>

<sect1 id="q9"><title>Polishing your man page</title>

<para>Following are some guidelines that increase reliability, readability
and 'formatability' of your documentation.</para>

<itemizedlist>

<listitem><para>Test examples to make sure they work (use cut and
paste to give your shell the exact wording from the man page). Copy
the output of your command into your man page, don't just type what
you <emphasis>think</emphasis> your program will print.</para></listitem>

<listitem><para>Proof read, ispell, and have someone else read it,
especially if you are not a native English speaker. The HOWTO you are
reading has passed the latter test (special thanks to Michael Miller
for a particularly heroic contribution! All the remaining rough edges
are entirely my fault).  Additional volunteers are always
welcome.</para></listitem>

<listitem><para>Test your man page: Does <application>groff</application>
complain when you format your man page? It's nice to have the
<application>groff</application> command line in a comment. Does the
<citerefentry>
<refentrytitle>man</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
command complain when you call <command>man yourprog</command>? 
Does it produce the expected result? Will
<citerefentry>
<refentrytitle>xman</refentrytitle><manvolnum>1m</manvolnum>
</citerefentry> and
<citerefentry>
<refentrytitle>tkman</refentrytitle><manvolnum>1tk</manvolnum>
</citerefentry> cope
with your manual?  XFree86 3.1 has xman 3.1.6 - X11R6, it will try to
uncompress using:</para>

<programlisting>
gzip -c -d &lt; %s &gt; %s
zcat &lt; %s &gt; %s 
</programlisting>
</listitem>

<listitem><para>Will 
<citerefentry>
<refentrytitle>makewhatis</refentrytitle><manvolnum>8</manvolnum>
</citerefentry>
be able to extract the one-line description from the NAME
section?</para></listitem> 
</itemizedlist>

</sect1>
<sect1 id="q10"><title>How do I get a plain text man page 
without all that ^H^_ stuff? </title>

<para>Have a look at
<citerefentry>
<refentrytitle>col</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
because <application>col</application> can filter out backspace
sequences. Just in case you can't wait that long: </para>

<programlisting>
funnyprompt$ groff -t -e -mandoc -Tascii manpage.1 | \
               col -bx &gt; manpage.txt
</programlisting>

<para>The <option>-t</option> and <option>-e</option> switches tell
<application>groff</application> to preprocess using <application>tbl</application>
and <application>eqn</application>. This is overkill for man pages that don't
require preprocessing but it does no harm apart from a few CPU cycles
wasted. On the other hand, not using <option>-t</option> when it is
actually required does harm: the table is terribly formatted. You can
even find out (well, "guess" is a better word) what command is needed
to format a certain <application>groff</application> document (not just man
pages) by issuing </para>

<programlisting>
funnyprompt$ grog /usr/man/man7/signal.7 groff -t -man /usr/man/man7/signal.7
</programlisting>

<para>"Grog" stands for "GROff Guess", and it does what
it says &mdash; guess. If it were perfect we wouldn't need options any more.
I've seen it guess incorrectly on macro packages and on preprocessors.
Here is a little perl script I wrote that can delete the page headers
and footers, thereby saving you a few pages (and mother nature a tree)
when printing long and elaborate man pages. Save it in a file named
<filename>strip-headers</filename> &amp; chmod 755. </para>

<programlisting>
    #!/usr/bin/perl -wn
    #  make it slurp the whole file at once:
    undef $/;
    #  delete first header:
    s/^\n*.*\n+//;
    #  delete last footer:
    s/\n+.*\n+$/\n/g;
    #  delete page breaks:
    s/\n\n+[^ \t].*\n\n+(\S+).*\1\n\n+/\n/g;
    #  collapse two or more blank lines into a single one:
    s/\n{3,}/\n\n/g;
    #  see what's left...
    print;
</programlisting>

<para>You have to use it as the first filter after the
<application>man</application> command as it relies on the number of
newlines being output by <application>groff</application>. For
example: </para>

<programlisting>
funnyprompt$ man bash | strip-headers | col -bx &gt; bash.txt
</programlisting>
</sect1>

<sect1 id="q11"><title>How do I get a high quality PostScript
man page?</title>

<programlisting>
funnyprompt$ groff -t -e -mandoc -Tps manpage.1 &gt; manpage.ps
</programlisting>

<para>Print or view that using your favorite PostScript
printer/viewer.  See <link linkend="q10">question 10)</link> for an
explanation of the options.</para>
</sect1>

<sect1 id="q12"><title>How do I get `apropos' and `whatis' to work? </title>

<para>Suppose you wonder what compilers are installed on your system
and how these can be invoked. To answer this (frequently asked)
question you say </para>

<programlisting>
funnyprompt$ apropos compiler
f77 (1) - Fortran 77 compiler
gcc (1) - GNU C and C++ compiler
pc (1) - Pascal compiler
</programlisting>

<para><application>Apropos</application> and
<application>whatis</application> are used to quickly report which man
page has information on a certain topic. Both programs search a number
of files named `whatis' that may be found in each of the manual base
directories. As previously stated, the whatis data base files contain
a one line entry for any man page in the respective directory tree. In
fact, that line is exactly the NAME section (to be precise: joined on
one line and with hyphenation removed; note that the section is
mentioned within parentheses). The whatis database files are created
with the
<citerefentry>
<refentrytitle>makewhatis</refentrytitle> <manvolnum>8</manvolnum>
</citerefentry>
program. There are several versions around, so please refer to the man
page to determine what options are available. In order for
<application>makewhatis</application> to be able to extract the NAME
sections correctly it is important that you, the manual writer, adhere
to the NAME section format described under <link linkend="q3">question
3)</link>. The differences between
<application>apropos</application> and
<application>whatis</application> are simply where in the line they
look, and what they are looking
for. <application>Apropos</application> (which is equivalent to
<command>man -k</command>) searches the argument string anywhere on
the line, whereas <application>whatis</application> (equivalent to
<command>man -f</command>) tries to match a complete command name only
on the part before the dash.  Consequently, `<command>whatis
cc</command>' will report if there is a <application>cc</application>
manual and remain quiet for <application>gcc</application>.</para>
</sect1>

<sect1><title>Corrections and suggestions welcome!</title>

<sect2 id="copying"><title>A) Copying conditions</title>

<para>Copyright 1995-2001 by Jens Schweikhardt. All rights reserved.</para>
<literallayout>
"Two clause" BSD License:

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.
</literallayout>

</sect2>
<sect2 id="acknowledgements"><title>B) Acknowledgements</title>

<itemizedlist>
<listitem><para>Eric S. Raymond for converting the HTML to
    XML-DocBook.</para></listitem>
<listitem><para>Michael Miller for proofreading the whole HOWTO (in February
    2001); Gordon Torrie for many helpful grammar remarks (in August 2001). Any
    remaining grammar or style bogons are entirely my fault.</para></listitem>
<listitem><para><ulink url="http://www.suse.de/">S.u.S.E. (.de)</ulink> 
    (or <ulink ulink="http://www.suse.com/">.com</ulink>)
    who are the only distributor to keep sending me a free copy of their
    latest product, acknowledging my work as a howto author.</para></listitem>
</itemizedlist>

<para>If your name is missing here, drop me a note.</para>
</sect2>
</sect1>

</article>
