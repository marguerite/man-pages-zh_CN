<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                   "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!-- lifted from man+troff by doclifter -->
<refentry id='npmfolders5'>
<refmeta>
<refentrytitle>NPM-FOLDERS</refentrytitle>
<manvolnum>5</manvolnum>
<refmiscinfo class='source'>November 2015</refmiscinfo>
</refmeta>
<refnamediv>
<refname>npm-folders</refname>
<refpurpose>Folder Structures Used by npm</refpurpose>
</refnamediv>
<!-- body begins here -->

<refsect1 id='description'><title>DESCRIPTION</title>
<para>npm puts various things on your computer.  That's its job.</para>

<para>This document will tell you what it puts where.</para>

<refsect2 id='tlsemidr'><title>tl;dr</title>
  <blockquote remap='RS'>
  <itemizedlist remap='IP+bullet'>
    <listitem override='bullet'>
<para>Local install (default): puts stuff in <emphasis remap='B'>&thinsp;./node_modules</emphasis> of the current
package root.</para>
    </listitem>
    <listitem override='bullet'>
<para>Global install (with <option>-g</option>): puts stuff in /usr/local or wherever node
is installed.</para>
    </listitem>
    <listitem override='bullet'>
<para>Install it <emphasis remap='B'>locally</emphasis> if you're going to <function>require()</function> it.</para>
    </listitem>
    <listitem override='bullet'>
<para>Install it <emphasis remap='B'>globally</emphasis> if you're going to run it on the command line.</para>
    </listitem>
    <listitem override='bullet'>
<para>If you need both, then install it in both places, or use <emphasis remap='B'>npm link</emphasis>&thinsp;.</para>

    </listitem>
  </itemizedlist>
  </blockquote> <!-- remap='RE' -->
</refsect2>

<refsect2 id='prefix_configuration'><title>prefix Configuration</title>

<para>The <emphasis remap='B'>prefix</emphasis> config defaults to the location where node is installed.
On most systems, this is <filename>/usr/local</filename>, and most of the time is the same
as node's <emphasis remap='B'>process.installPrefix</emphasis>&thinsp;.</para>

<para>On windows, this is the exact location of the node.exe binary.  On Unix
systems, it's one level up, since node is typically installed at
<emphasis remap='B'>{prefix}/bin/node</emphasis> rather than <emphasis remap='B'>{prefix}/node.exe</emphasis>&thinsp;.</para>

<para>When the <emphasis remap='B'>global</emphasis> flag is set, npm installs things into this prefix.
When it is not set, it uses the root of the current package, or the
current working directory if not in a package already.</para>
</refsect2>

<refsect2 id='node_modules'><title>Node Modules</title>

<para>Packages are dropped into the <emphasis remap='B'>node_modules</emphasis> folder under the <emphasis remap='B'>prefix</emphasis>&thinsp;.
When installing locally, this means that you can
<emphasis remap='B'>require("packagename")</emphasis> to load its main module, or
<emphasis remap='B'>require("packagename/lib/path/to/sub/module")</emphasis> to load other modules.</para>

<para>Global installs on Unix systems go to <emphasis remap='B'>{prefix}/lib/node_modules</emphasis>&thinsp;.
Global installs on Windows go to <emphasis remap='B'>{prefix}/node_modules</emphasis> (that is, no
<emphasis remap='B'>lib</emphasis> folder.)</para>

<para>Scoped packages are installed the same way, except they are grouped together
in a sub-folder of the relevant <emphasis remap='B'>node_modules</emphasis> folder with the name of that
scope prefix by the @ symbol, e.g. <emphasis remap='B'>npm install @myorg/package</emphasis> would place
the package in <emphasis remap='B'>{prefix}/node_modules/@myorg/package</emphasis>&thinsp;. See npm help 7 <emphasis remap='B'>scopes</emphasis> for
more details.</para>

<para>If you wish to <function>require()</function> a package, then install it locally.</para>
</refsect2>

<refsect2 id='executables'><title>Executables</title>

<para>When in global mode, executables are linked into <emphasis remap='B'>{prefix}/bin</emphasis> on Unix,
or directly into <emphasis remap='B'>{prefix}</emphasis> on Windows.</para>

<para>When in local mode, executables are linked into
<emphasis remap='B'>&thinsp;./node_modules/.bin</emphasis> so that they can be made available to scripts run
through npm.  (For example, so that a test runner will be in the path
when you run <emphasis remap='B'>npm test</emphasis>&thinsp;.)</para>
</refsect2>

<refsect2 id='man_pages'><title>Man Pages</title>

<para>When in global mode, man pages are linked into <emphasis remap='B'>{prefix}/share/man</emphasis>&thinsp;.</para>

<para>When in local mode, man pages are not installed.</para>

<para>Man pages are not installed on Windows systems.</para>
</refsect2>

<refsect2 id='cache'><title>Cache</title>

<para>See npm help <emphasis remap='B'>npm-cache</emphasis>&thinsp;.  Cache files are stored in <filename>~/.npm</filename> on Posix, or
<filename>~/npm-cache</filename> on Windows.</para>

<para>This is controlled by the <emphasis remap='B'>cache</emphasis> configuration param.</para>
</refsect2>

<refsect2 id='temp_files'><title>Temp Files</title>

<para>Temporary files are stored by default in the folder specified by the
<emphasis remap='B'>tmp</emphasis> config, which defaults to the TMPDIR, TMP, or TEMP environment
variables, or <filename>/tmp</filename> on Unix and <emphasis remap='B'>c:&bsol;windows&bsol;temp</emphasis> on Windows.</para>

<para>Temp files are given a unique folder under this root for each run of the
program, and are deleted upon successful exit.</para>
</refsect2>
</refsect1>

<refsect1 id='more_information'><title>More Information</title>
<para>When installing locally, npm first tries to find an appropriate
<emphasis remap='B'>prefix</emphasis> folder.  This is so that <emphasis remap='B'>npm install foo@1.2.3</emphasis> will install
to the sensible root of your package, even if you happen to have <emphasis remap='B'>cd</emphasis>ed
into some other folder.</para>

<para>Starting at the $PWD, npm will walk up the folder tree checking for a
folder that contains either a <emphasis remap='B'>package.json</emphasis> file, or a <emphasis remap='B'>node_modules</emphasis>
folder.  If such a thing is found, then that is treated as the effective
"current directory" for the purpose of running npm commands.  (This
behavior is inspired by and similar to git's .git-folder seeking
logic when running git commands in a working dir.)</para>

<para>If no package root is found, then the current folder is used.</para>

<para>When you run <emphasis remap='B'>npm install foo@1.2.3</emphasis>, then the package is loaded into
the cache, and then unpacked into <emphasis remap='B'>&thinsp;./node_modules/foo</emphasis>&thinsp;.  Then, any of
foo's dependencies are similarly unpacked into
<emphasis remap='B'>&thinsp;./node_modules/foo/node_modules/...</emphasis>&thinsp;.</para>

<para>Any bin files are symlinked to <emphasis remap='B'>&thinsp;./node_modules/.bin/</emphasis>, so that they may
be found by npm scripts when necessary.</para>

<refsect2 id='global_installation'><title>Global Installation</title>

<para>If the <emphasis remap='B'>global</emphasis> configuration is set to true, then npm will
install packages "globally".</para>

<para>For global installation, packages are installed roughly the same way,
but using the folders described above.</para>
</refsect2>

<refsect2 id='cycles_conflicts_and_folder_parsimony'><title>Cycles, Conflicts, and Folder Parsimony</title>

<para>Cycles are handled using the property of node's module system that it
walks up the directories looking for <emphasis remap='B'>node_modules</emphasis> folders.  So, at every
stage, if a package is already installed in an ancestor <emphasis remap='B'>node_modules</emphasis>
folder, then it is not installed at the current location.</para>

<para>Consider the case above, where <userinput>foo -&gt; bar -&gt; baz</userinput>&thinsp;.  Imagine if, in
addition to that, baz depended on bar, so you'd have:
<userinput>foo -&gt; bar -&gt; baz -&gt; bar -&gt; baz ...</userinput>&thinsp;.  However, since the folder
structure is: <emphasis remap='B'>foo/node_modules/bar/node_modules/baz</emphasis>, there's no need to
put another copy of bar into <emphasis remap='B'>&thinsp;.../baz/node_modules</emphasis>, since when it calls
require("bar"), it will get the copy that is installed in
<emphasis remap='B'>foo/node_modules/bar</emphasis>&thinsp;.</para>

<para>This shortcut is only used if the exact same
version would be installed in multiple nested <emphasis remap='B'>node_modules</emphasis> folders.  It
is still possible to have <emphasis remap='B'>a/node_modules/b/node_modules/a</emphasis> if the two
"a" packages are different versions.  However, without repeating the
exact same package multiple times, an infinite regress will always be
prevented.</para>

<para>Another optimization can be made by installing dependencies at the
highest level possible, below the localized "target" folder.</para>
</refsect2>

<refsect2 id='example'><title>Example</title>

<para>Consider this dependency graph:</para>

<literallayout remap='.nf'>
foo
+-- blerg@1.2.5
+-- bar@1.2.3
|   +-- blerg@1.x (latest=1.3.7)
|   +-- baz@2.x
|   |   `-- quux@3.x
|   |       `-- bar@1.2.3 (cycle)
|   `-- asdf@*
`-- baz@1.2.3
    `-- quux@3.x
        `-- bar
</literallayout> <!-- .fi -->

<para>In this case, we might expect a folder structure like this:</para>

<literallayout remap='.nf'>
foo
+-- node_modules
    +-- blerg (1.2.5) &lt;---[A]
    +-- bar (1.2.3) &lt;---[B]
    |   `-- node_modules
    |       +-- baz (2.0.2) &lt;---[C]
    |       |   `-- node_modules
    |       |       `-- quux (3.2.0)
    |       `-- asdf (2.3.4)
    `-- baz (1.2.3) &lt;---[D]
        `-- node_modules
            `-- quux (3.2.0) &lt;---[E]
</literallayout> <!-- .fi -->

<para>Since foo depends directly on <email>bar@1.2.3</email> and <email>baz@1.2.3</email>, those are
installed in foo's <emphasis remap='B'>node_modules</emphasis> folder.</para>

<para>Even though the latest copy of blerg is 1.3.7, foo has a specific
dependency on version 1.2.5.  So, that gets installed at [A].  Since the
parent installation of blerg satisfies bar's dependency on <email>blerg@1.x</email>,
it does not install another copy under [B].</para>

<para>Bar [B] also has dependencies on baz and asdf, so those are installed in
bar's <emphasis remap='B'>node_modules</emphasis> folder.  Because it depends on <email>baz@2.x</email>, it cannot
re-use the <email>baz@1.2.3</email> installed in the parent <emphasis remap='B'>node_modules</emphasis> folder [D],
and must install its own copy [C].</para>

<para>Underneath bar, the <userinput>baz -&gt; quux -&gt; bar</userinput> dependency creates a cycle.
However, because bar is already in quux's ancestry [B], it does not
unpack another copy of bar into that folder.</para>

<para>Underneath <userinput>foo -&gt; baz</userinput> [D], quux's [E] folder tree is empty, because its
dependency on bar is satisfied by the parent folder copy installed at [B].</para>

<para>For a graphical breakdown of what is installed where, use <emphasis remap='B'>npm ls</emphasis>&thinsp;.</para>
</refsect2>

<refsect2 id='publishing'><title>Publishing</title>

<para>Upon publishing, npm will look in the <emphasis remap='B'>node_modules</emphasis> folder.  If any of
the items there are not in the <emphasis remap='B'>bundledDependencies</emphasis> array, then they will
not be included in the package tarball.</para>

<para>This allows a package maintainer to install all of their dependencies
(and dev dependencies) locally, but only re-publish those items that
cannot be found elsewhere.  See npm help 5 <emphasis remap='B'>package.json</emphasis> for more information.</para>
</refsect2>
</refsect1>

<refsect1 id='see_also'><title>SEE ALSO</title>
  <blockquote remap='RS'>
  <itemizedlist remap='IP+bullet'>
    <listitem override='bullet'>
<para>npm help 7 faq</para>
    </listitem>
    <listitem override='bullet'>
<para>npm help 5 package.json</para>
    </listitem>
    <listitem override='bullet'>
<para>npm help install</para>
    </listitem>
    <listitem override='bullet'>
<para>npm help pack</para>
    </listitem>
    <listitem override='bullet'>
<para>npm help cache</para>
    </listitem>
    <listitem override='bullet'>
<para>npm help config</para>
    </listitem>
    <listitem override='bullet'>
<para>npm help 5 npmrc</para>
    </listitem>
    <listitem override='bullet'>
<para>npm help 7 config</para>
    </listitem>
    <listitem override='bullet'>
<para>npm help publish</para>

    </listitem>
  </itemizedlist>
  </blockquote> <!-- remap='RE' -->
</refsect1>
</refentry>

