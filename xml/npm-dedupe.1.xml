<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                   "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!-- lifted from man+troff by doclifter -->
<refentry id='npmdedupe1'>
<refmeta>
<refentrytitle>NPM-DEDUPE</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class='source'>November 2015</refmiscinfo>
</refmeta>
<refnamediv>
<refname>npm-dedupe</refname>
<refpurpose>Reduce duplication</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv id='synopsis'>
<cmdsynopsis>
  <command>npm</command>    <arg choice='plain'><replaceable>dedupe</replaceable></arg>
    <arg choice='opt'><arg choice='plain'><replaceable>package</replaceable></arg><arg choice='plain' rep='repeat'><replaceable>names</replaceable></arg></arg>
    <arg choice='plain'><replaceable>npm</replaceable></arg>
    <arg choice='plain'><replaceable>ddp</replaceable></arg>
    <arg choice='opt'><arg choice='plain'><replaceable>package</replaceable></arg><arg choice='plain' rep='repeat'><replaceable>names</replaceable></arg></arg>
</cmdsynopsis>
</refsynopsisdiv>


<refsect1 id='description'><title>DESCRIPTION</title>
<para>Searches the local package tree and attempts to simplify the overall
structure by moving dependencies further up the tree, where they can
be more effectively shared by multiple dependent packages.</para>

<para>For example, consider this dependency graph:</para>

<literallayout remap='.nf'>
a
+-- b &lt;-- depends on c@1.0.x
|   `-- c@1.0.3
`-- d &lt;-- depends on c@~1.0.9
    `-- c@1.0.10
</literallayout> <!-- .fi -->

<para>In this case, npm help <emphasis remap='B'>npm-dedupe</emphasis> will transform the tree to:</para>

<literallayout remap='.nf'>
a
+-- b
+-- d
`-- c@1.0.10
</literallayout> <!-- .fi -->

<para>Because of the hierarchical nature of node's module lookup, b and d
will both get their dependency met by the single c package at the root
level of the tree.</para>

<para>The deduplication algorithm walks the tree, moving each dependency as far
up in the tree as possible, even if duplicates are not found. This will
result in both a flat and deduplicated tree.</para>

<para>If a suitable version exists at the target location in the tree
already, then it will be left untouched, but the other duplicates will
be deleted.</para>

<para>Arguments are ignored. Dedupe always acts on the entire tree.</para>

<para>Modules</para>

<para>Note that this operation transforms the dependency tree, but will never
result in new modules being installed.</para>
</refsect1>

<refsect1 id='see_also'><title>SEE ALSO</title>
  <blockquote remap='RS'>
  <itemizedlist remap='IP+bullet'>
    <listitem override='bullet'>
<para>npm help ls</para>
    </listitem>
    <listitem override='bullet'>
<para>npm help update</para>
    </listitem>
    <listitem override='bullet'>
<para>npm help install</para>

    </listitem>
  </itemizedlist>
  </blockquote> <!-- remap='RE' -->
</refsect1>
</refentry>

