<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                   "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!-- lifted from man+troff by doclifter -->
<refentry id='npmreadme1'>
<refmeta>
<refentrytitle>NPM</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class='source'>November 2015</refmiscinfo>
</refmeta>
<refnamediv>
<refname>npm</refname>
<refpurpose>a JavaScript package manager</refpurpose>
</refnamediv>
<refnamediv>
<refname>Build Status https://img.shields.io/travis/npm/npm/master.svg https://travis</refname>
<refpurpose>ci.org/npm/npm</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv id='synopsis'>
<para>This is just enough info to get you up and running.
Much more info available via <emphasis remap='B'>npm help</emphasis> once it's installed.</para>
</refsynopsisdiv>


<refsect1 id='important'><title>IMPORTANT</title>
<para><emphasis remap='B'>You need node v0.8 or higher to run this program.</emphasis></para>

<para>To install an old <emphasis remap='B'>and unsupported</emphasis> version of npm that works on node 0.3
and prior, clone the git repo and dig through the old tags and branches.</para>
</refsect1>

<refsect1 id='super_easy_install'><title>Super Easy Install</title>
<para>npm is bundled with node <emphasis remap='I'><ulink url='http://nodejs.org/download/'>http://nodejs.org/download/</ulink></emphasis>&thinsp;.</para>

<refsect2 id='windows_computers'><title>Windows Computers</title>

<para>Get the MSI <emphasis remap='I'><ulink url='http://nodejs.org/download/'>http://nodejs.org/download/</ulink></emphasis>&thinsp;.  npm is in it.</para>
</refsect2>

<refsect2 id='apple_macintosh_computers'><title>Apple Macintosh Computers</title>

<para>Get the pkg <emphasis remap='I'><ulink url='http://nodejs.org/download/'>http://nodejs.org/download/</ulink></emphasis>&thinsp;.  npm is in it.</para>
</refsect2>

<refsect2 id='other_sorts_of_unices'><title>Other Sorts of Unices</title>

<para>Run <emphasis remap='B'>make install</emphasis>&thinsp;.  npm will be installed with node.</para>

<para>If you want a more fancy pants install (a different version, customized
paths, etc.) then read on.</para>
</refsect2>
</refsect1>

<refsect1 id='fancy_install'><title>Fancy Install (Unix)</title>
<para>There's a pretty robust install script at
https://www.npmjs.com/install.sh&thinsp;.  You can download that and run it.</para>

<para>Here's an example using curl:</para>

<literallayout remap='.nf'>
curl -L https://www.npmjs.com/install.sh | sh
</literallayout> <!-- .fi -->

<refsect2 id='slightly_fancier'><title>Slightly Fancier</title>

<para>You can set any npm configuration params with that script:</para>

<literallayout remap='.nf'>
npm_config_prefix=/some/path sh install.sh
</literallayout> <!-- .fi -->

<para>Or, you can run it in uber-debuggery mode:</para>

<literallayout remap='.nf'>
npm_debug=1 sh install.sh
</literallayout> <!-- .fi -->
</refsect2>

<refsect2 id='even_fancier'><title>Even Fancier</title>

<para>Get the code with git.  Use <emphasis remap='B'>make</emphasis> to build the docs and do other stuff.
If you plan on hacking on npm, <emphasis remap='B'>make link</emphasis> is your friend.</para>

<para>If you've got the npm source code, you can also semi-permanently set
arbitrary config keys using the <emphasis remap='B'>&thinsp;./configure --key=val ...</emphasis>, and then
run npm commands by doing <emphasis remap='B'>node cli.js &lt;cmd&gt; &lt;args&gt;</emphasis>&thinsp;.  (This is helpful
for testing, or running stuff without actually installing npm itself.)</para>
</refsect2>
</refsect1>

<refsect1 id='windows_install_or_upgrade'><title>Windows Install or Upgrade</title>
<para>You can download a zip file from https://github.com/npm/npm/releases, and
unpack it in the <emphasis remap='B'>node_modules&bsol;npm&bsol;</emphasis> folder inside node's installation folder.</para>

<para>To upgrade to npm 2, follow the Windows upgrade instructions in
the npm Troubleshooting Guide:</para>

<para>https://github.com/npm/npm/wiki/Troubleshooting#upgrading-on-windows</para>

<para>If that's not fancy enough for you, then you can fetch the code with
git, and mess with it directly.</para>
</refsect1>

<refsect1 id='installing_on_cygwin'><title>Installing on Cygwin</title>
<para>No.</para>
</refsect1>

<refsect1 id='uninstalling'><title>Uninstalling</title>
<para>So sad to see you go.</para>

<literallayout remap='.nf'>
sudo npm uninstall npm -g
</literallayout> <!-- .fi -->

<para>Or, if that fails,</para>

<literallayout remap='.nf'>
sudo make uninstall
</literallayout> <!-- .fi -->
</refsect1>

<refsect1 id='more_severe_uninstalling'><title>More Severe Uninstalling</title>
<para>Usually, the above instructions are sufficient.  That will remove
npm, but leave behind anything you've installed.</para>

<para>If you would like to remove all the packages that you have installed,
then you can use the <emphasis remap='B'>npm ls</emphasis> command to find them, and then <emphasis remap='B'>npm rm</emphasis> to
remove them.</para>

<para>To remove cruft left behind by npm 0.x, you can use the included
<emphasis remap='B'>clean-old.sh</emphasis> script file.  You can run it conveniently like this:</para>

<literallayout remap='.nf'>
npm explore npm -g -- sh scripts/clean-old.sh
</literallayout> <!-- .fi -->

<para>npm uses two configuration files, one for per-user configs, and another
for global (every-user) configs.  You can view them by doing:</para>

<literallayout remap='.nf'>
npm config get userconfig   # defaults to ~/.npmrc
npm config get globalconfig # defaults to /usr/local/etc/npmrc
</literallayout> <!-- .fi -->

<para>Uninstalling npm does not remove configuration files by default.  You
must remove them yourself manually if you want them gone.  Note that
this means that future npm installs will not remember the settings that
you have chosen.</para>
</refsect1>

<refsect1 id='using_npm_programmatically'><title>Using npm Programmatically</title>
<para>Although npm can be used programmatically, its API is meant for use by the CLI
<emphasis remap='I'>only</emphasis>, and no guarantees are made regarding its fitness for any other purpose.
If you want to use npm to reliably perform some task, the safest thing to do is
to invoke the desired <emphasis remap='B'>npm</emphasis> command with appropriate arguments.</para>

<para>The semantic version of npm refers to the CLI itself, rather than the
underlying API. <emphasis remap='I'>The internal API is not guaranteed to remain stable even when
npm's version indicates no breaking changes have been made according to
semver.</emphasis></para>

<para>If you <emphasis remap='I'>still</emphasis> would like to use npm programmatically, it's <emphasis remap='I'>possible</emphasis>&thinsp;. The API
isn't very well documented, but it <emphasis remap='I'>is</emphasis> rather simple.</para>

<para>Eventually, npm will be just a thin CLI wrapper around the modules that it
depends on, but for now, there are some things that only the CLI can do. You
should try using one of npm's dependencies first, and only use the API if what
you're trying to do is only supported by npm itself.</para>

<programlisting remap='.nf'>
var npm = require("npm")
npm.load(myConfigObject, function (er) {
  if (er) return handlError(er)
  npm.commands.install(["some", "args"], function (er, data) {
    if (er) return commandFailed(er)
    // command succeeded, and data might have some info
  })
  npm.registry.log.on("log", function (message) { .... })
})
</programlisting> <!-- .fi -->

<para>The <emphasis remap='B'>load</emphasis> function takes an object hash of the command-line configs.
The various <emphasis remap='B'>npm.commands.&lt;cmd&gt;</emphasis> functions take an <emphasis remap='B'>array</emphasis> of
positional argument <emphasis remap='B'>strings</emphasis>&thinsp;.  The last argument to any
<emphasis remap='B'>npm.commands.&lt;cmd&gt;</emphasis> function is a callback.  Some commands take other
optional arguments.  Read the source.</para>

<para>You cannot set configs individually for any single npm function at this
time.  Since <emphasis remap='B'>npm</emphasis> is a singleton, any call to <emphasis remap='B'>npm.config.set</emphasis> will
change the value for <emphasis remap='I'>all</emphasis> npm commands in that process.</para>

<para>See <emphasis remap='B'>&thinsp;./bin/npm-cli.js</emphasis> for an example of pulling config values off of the
command line arguments using nopt.  You may also want to check out <emphasis remap='B'>npm
help config</emphasis> to learn about all the options you can set there.</para>
</refsect1>

<refsect1 id='more_docs'><title>More Docs</title>
<para>Check out the docs <emphasis remap='I'>https://docs.npmjs.com/</emphasis>,
especially the faq <emphasis remap='I'>https://docs.npmjs.com/misc/faq</emphasis>&thinsp;.</para>

<para>You can use the <emphasis remap='B'>npm help</emphasis> command to read any of them.</para>

<para>If you're a developer, and you want to use npm to publish your program,
you should read this <emphasis remap='I'>https://docs.npmjs.com/misc/developers</emphasis></para>
</refsect1>

<refsect1 id='legal_stuff'><title>Legal Stuff</title>
<para>"npm" and "The npm Registry" are owned by npm, Inc.
All rights reserved.  See the included LICENSE file for more details.</para>

<para>"Node.js" and "node" are trademarks owned by Joyent, Inc.</para>

<para>Modules published on the npm registry are not officially endorsed by
npm, Inc. or the Node.js project.</para>

<para>Data published to the npm registry is not part of npm itself, and is
the sole property of the publisher.  While every effort is made to
ensure accountability, there is absolutely no guarantee, warranty, or
assertion expressed or implied as to the quality, fitness for a
specific purpose, or lack of malice in any given npm package.</para>

<para>If you have a complaint about a package in the public npm registry,
and cannot resolve it with the package
owner <emphasis remap='I'>https://docs.npmjs.com/misc/disputes</emphasis>, please email
support@npmjs.com and explain the situation.</para>

<para>Any data published to The npm Registry (including user account
information) may be removed or modified at the sole discretion of the
npm server administrators.</para>

<refsect2 id='in_plainer_english'><title>In plainer English</title>

<para>npm is the property of npm, Inc.</para>

<para>If you publish something, it's yours, and you are solely accountable
for it.</para>

<para>If other people publish something, it's theirs.</para>

<para>Users can publish Bad Stuff.  It will be removed promptly if reported.
But there is no vetting process for published modules, and you use
them at your own risk.  Please inspect the source.</para>

<para>If you publish Bad Stuff, we may delete it from the registry, or even
ban your account in extreme cases.  So don't do that.</para>
</refsect2>
</refsect1>

<refsect1 id='bugs'><title>BUGS</title>
<para>When you find issues, please report them:</para>
  <blockquote remap='RS'>
  <itemizedlist remap='IP+bullet'>
    <listitem override='bullet'>
<para>web:
https://github.com/npm/npm/issues</para>

    </listitem>
  </itemizedlist>
  </blockquote> <!-- remap='RE' -->

<para>Be sure to include <emphasis remap='I'>all</emphasis> of the output from the npm command that didn't work
as expected.  The <emphasis remap='B'>npm-debug.log</emphasis> file is also helpful to provide.</para>

<para>You can also look for isaacs in #node.js on irc://irc.freenode.net.  He
will no doubt tell you to put the output in a gist or email.</para>
</refsect1>

<refsect1 id='see_also'><title>SEE ALSO</title>
  <blockquote remap='RS'>
  <itemizedlist remap='IP+bullet'>
    <listitem override='bullet'>
<para>npm help npm</para>
    </listitem>
    <listitem override='bullet'>
<para>npm help 7 faq</para>
    </listitem>
    <listitem override='bullet'>
<para>npm help help</para>
    </listitem>
    <listitem override='bullet'>
<para>npm help 7 index</para>

    </listitem>
  </itemizedlist>
  </blockquote> <!-- remap='RE' -->
</refsect1>
</refentry>

