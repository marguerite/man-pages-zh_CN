<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                   "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!-- lifted from man+troff by doclifter -->
<refentry id='npmscripts7'>
<refmeta>
<refentrytitle>NPM-SCRIPTS</refentrytitle>
<manvolnum>7</manvolnum>
<refmiscinfo class='source'>November 2015</refmiscinfo>
</refmeta>
<refnamediv>
<refname>npm-scripts</refname>
<refpurpose>How npm handles the "scripts" field</refpurpose>
</refnamediv>
<!-- body begins here -->

<refsect1 id='description'><title>DESCRIPTION</title>
<para>npm supports the "scripts" property of the package.json script, for the
following scripts:</para>
  <blockquote remap='RS'>
  <itemizedlist remap='IP+bullet'>
    <listitem override='bullet'>
<para>prepublish:
Run BEFORE the package is published.  (Also run on local <emphasis remap='B'>npm
install</emphasis> without any arguments.)</para>
    </listitem>
    <listitem override='bullet'>
<para>publish, postpublish:
Run AFTER the package is published.</para>
    </listitem>
    <listitem override='bullet'>
<para>preinstall:
Run BEFORE the package is installed</para>
    </listitem>
    <listitem override='bullet'>
<para>install, postinstall:
Run AFTER the package is installed.</para>
    </listitem>
    <listitem override='bullet'>
<para>preuninstall, uninstall:
Run BEFORE the package is uninstalled.</para>
    </listitem>
    <listitem override='bullet'>
<para>postuninstall:
Run AFTER the package is uninstalled.</para>
    </listitem>
    <listitem override='bullet'>
<para>preversion, version:
Run BEFORE bump the package version.</para>
    </listitem>
    <listitem override='bullet'>
<para>postversion:
Run AFTER bump the package version.</para>
    </listitem>
    <listitem override='bullet'>
<para>pretest, test, posttest:
Run by the <emphasis remap='B'>npm test</emphasis> command.</para>
    </listitem>
    <listitem override='bullet'>
<para>prestop, stop, poststop:
Run by the <emphasis remap='B'>npm stop</emphasis> command.</para>
    </listitem>
    <listitem override='bullet'>
<para>prestart, start, poststart:
Run by the <emphasis remap='B'>npm start</emphasis> command.</para>
    </listitem>
    <listitem override='bullet'>
<para>prerestart, restart, postrestart:
Run by the <emphasis remap='B'>npm restart</emphasis> command. Note: <emphasis remap='B'>npm restart</emphasis> will run the
stop and start scripts if no <emphasis remap='B'>restart</emphasis> script is provided.</para>

    </listitem>
  </itemizedlist>
  </blockquote> <!-- remap='RE' -->

<para>Additionally, arbitrary scripts can be executed by running <emphasis remap='B'>npm
run-script &lt;pkg&gt; &lt;stage&gt;</emphasis>&thinsp;. <emphasis remap='I'>Pre</emphasis> and <emphasis remap='I'>post</emphasis> commands with matching
names will be run for those as well (e.g. <emphasis remap='B'>premyscript</emphasis>, <emphasis remap='B'>myscript</emphasis>,
<emphasis remap='B'>postmyscript</emphasis>).</para>
</refsect1>

<refsect1 id='common_uses'><title>COMMON USES</title>
<para>If you need to perform operations on your package before it is used, in a way
that is not dependent on the operating system or architecture of the
target system, use a <emphasis remap='B'>prepublish</emphasis> script.  This includes
tasks such as:</para>
  <blockquote remap='RS'>
  <itemizedlist remap='IP+bullet'>
    <listitem override='bullet'>
<para>Compiling CoffeeScript source code into JavaScript.</para>
    </listitem>
    <listitem override='bullet'>
<para>Creating minified versions of JavaScript source code.</para>
    </listitem>
    <listitem override='bullet'>
<para>Fetching remote resources that your package will use.</para>

    </listitem>
  </itemizedlist>
  </blockquote> <!-- remap='RE' -->

<para>The advantage of doing these things at <emphasis remap='B'>prepublish</emphasis> time is that they can be done once, in a
single place, thus reducing complexity and variability.
Additionally, this means that:</para>
  <blockquote remap='RS'>
  <itemizedlist remap='IP+bullet'>
    <listitem override='bullet'>
<para>You can depend on <emphasis remap='B'>coffee-script</emphasis> as a <emphasis remap='B'>devDependency</emphasis>, and thus
your users don't need to have it installed.</para>
    </listitem>
    <listitem override='bullet'>
<para>You don't need to include minifiers in your package, reducing
the size for your users.</para>
    </listitem>
    <listitem override='bullet'>
<para>You don't need to rely on your users having <emphasis remap='B'>curl</emphasis> or <emphasis remap='B'>wget</emphasis> or
other system tools on the target machines.</para>

    </listitem>
  </itemizedlist>
  </blockquote> <!-- remap='RE' -->
</refsect1>

<refsect1 id='default_values'><title>DEFAULT VALUES</title>
<para>npm will default some script values based on package contents.</para>
  <blockquote remap='RS'>
  <itemizedlist remap='IP+bullet'>
    <listitem override='bullet'>
<para><emphasis remap='B'>"start": "node server.js"</emphasis>:
If there is a <emphasis remap='B'>server.js</emphasis> file in the root of your package, then npm
will default the <emphasis remap='B'>start</emphasis> command to <emphasis remap='B'>node server.js</emphasis>&thinsp;.</para>
    </listitem>
    <listitem override='bullet'>
<para><emphasis remap='B'>"install": "node-gyp rebuild"</emphasis>:
If there is a <emphasis remap='B'>binding.gyp</emphasis> file in the root of your package, npm will
default the <emphasis remap='B'>install</emphasis> command to compile using node-gyp.</para>

    </listitem>
  </itemizedlist>
  </blockquote> <!-- remap='RE' -->
</refsect1>

<refsect1 id='user'><title>USER</title>
<para>If npm was invoked with root privileges, then it will change the uid
to the user account or uid specified by the <emphasis remap='B'>user</emphasis> config, which
defaults to <emphasis remap='B'>nobody</emphasis>&thinsp;.  Set the <emphasis remap='B'>unsafe-perm</emphasis> flag to run scripts with
root privileges.</para>
</refsect1>

<refsect1 id='environment'><title>ENVIRONMENT</title>
<para>Package scripts run in an environment where many pieces of information
are made available regarding the setup of npm and the current state of
the process.</para>

<refsect2 id='path'><title>path</title>

<para>If you depend on modules that define executable scripts, like test
suites, then those executables will be added to the <envar>PATH</envar> for
executing the scripts.  So, if your package.json has this:</para>

<literallayout remap='.nf'>
{ "name" : "foo"
, "dependencies" : { "bar" : "0.1.x" }
, "scripts": { "start" : "bar ./test" } }
</literallayout> <!-- .fi -->

<para>then you could run <emphasis remap='B'>npm start</emphasis> to execute the <emphasis remap='B'>bar</emphasis> script, which is
exported into the <emphasis remap='B'>node_modules/.bin</emphasis> directory on <emphasis remap='B'>npm install</emphasis>&thinsp;.</para>
</refsect2>

<refsect2 id='packagejson_vars'><title>package.json vars</title>

<para>The package.json fields are tacked onto the <emphasis remap='B'>npm_package_</emphasis> prefix. So,
for instance, if you had <emphasis remap='B'>{"name":"foo", "version":"1.2.5"}</emphasis> in your
package.json file, then your package scripts would have the
<emphasis remap='B'>npm_package_name</emphasis> environment variable set to "foo", and the
<emphasis remap='B'>npm_package_version</emphasis> set to "1.2.5"</para>
</refsect2>

<refsect2 id='configuration'><title>configuration</title>

<para>Configuration parameters are put in the environment with the
<emphasis remap='B'>npm_config_</emphasis> prefix. For instance, you can view the effective <emphasis remap='B'>root</emphasis>
config by checking the <emphasis remap='B'>npm_config_root</emphasis> environment variable.</para>
</refsect2>

<refsect2 id='special_packagejson_config_object'><title>Special: package.json config object</title>

<para>The package.json "config" keys are overwritten in the environment if
there is a config param of <emphasis remap='B'>&lt;name&gt;[@&lt;version&gt;]:&lt;key&gt;</emphasis>&thinsp;.  For example,
if the package.json has this:</para>

<literallayout remap='.nf'>
{ "name" : "foo"
, "config" : { "port" : "8080" }
, "scripts" : { "start" : "node server.js" } }
</literallayout> <!-- .fi -->

<para>and the server.js is this:</para>

<literallayout remap='.nf'>
http.createServer(...).listen(process.env.npm_package_config_port)
</literallayout> <!-- .fi -->

<para>then the user could change the behavior by doing:</para>

<literallayout remap='.nf'>
npm config set foo:port 80
</literallayout> <!-- .fi -->
</refsect2>

<refsect2 id='current_lifecycle_event'><title>current lifecycle event</title>

<para>Lastly, the <emphasis remap='B'>npm_lifecycle_event</emphasis> environment variable is set to
whichever stage of the cycle is being executed. So, you could have a
single script used for different parts of the process which switches
based on what's currently happening.</para>

<para>Objects are flattened following this format, so if you had
<emphasis remap='B'>{"scripts":{"install":"foo.js"}}</emphasis> in your package.json, then you'd
see this in the script:</para>

<literallayout remap='.nf'>
process.env.npm_package_scripts_install === "foo.js"
</literallayout> <!-- .fi -->
</refsect2>
</refsect1>

<refsect1 id='examples'><title>EXAMPLES</title>
<para>For example, if your package.json contains this:</para>

<literallayout remap='.nf'>
{ "scripts" :
  { "install" : "scripts/install.js"
  , "postinstall" : "scripts/install.js"
  , "uninstall" : "scripts/uninstall.js"
  }
}
</literallayout> <!-- .fi -->

<para>then the <emphasis remap='B'>scripts/install.js</emphasis> will be called for the install,
post-install, stages of the lifecycle, and the <emphasis remap='B'>scripts/uninstall.js</emphasis>
would be called when the package is uninstalled.  Since
<emphasis remap='B'>scripts/install.js</emphasis> is running for three different phases, it would
be wise in this case to look at the <emphasis remap='B'>npm_lifecycle_event</emphasis> environment
variable.</para>

<para>If you want to run a make command, you can do so.  This works just
fine:</para>

<literallayout remap='.nf'>
{ "scripts" :
  { "preinstall" : "./configure"
  , "install" : "make &amp;&amp; make install"
  , "test" : "make test"
  }
}
</literallayout> <!-- .fi -->
</refsect1>

<refsect1 id='exiting'><title>EXITING</title>
<para>Scripts are run by passing the line as a script argument to <emphasis remap='B'>sh</emphasis>&thinsp;.</para>

<para>If the script exits with a code other than 0, then this will abort the
process.</para>

<para>Note that these script files don't have to be nodejs or even
javascript programs. They just have to be some kind of executable
file.</para>
</refsect1>

<refsect1 id='hook_scripts'><title>HOOK SCRIPTS</title>
<para>If you want to run a specific script at a specific lifecycle event for
ALL packages, then you can use a hook script.</para>

<para>Place an executable file at <emphasis remap='B'>node_modules/.hooks/{eventname}</emphasis>, and
it'll get run for all packages when they are going through that point
in the package lifecycle for any packages installed in that root.</para>

<para>Hook scripts are run exactly the same way as package.json scripts.
That is, they are in a separate child process, with the env described
above.</para>
</refsect1>

<refsect1 id='best_practices'><title>BEST PRACTICES</title>
  <blockquote remap='RS'>
  <itemizedlist remap='IP+bullet'>
    <listitem override='bullet'>
<para>Don't exit with a non-zero error code unless you <emphasis remap='I'>really</emphasis> mean it.
Except for uninstall scripts, this will cause the npm action to
fail, and potentially be rolled back.  If the failure is minor or
only will prevent some optional features, then it's better to just
print a warning and exit successfully.</para>
    </listitem>
    <listitem override='bullet'>
<para>Try not to use scripts to do what npm can do for you.  Read through
npm help 5 <emphasis remap='B'>package.json</emphasis> to see all the things that you can specify and enable
by simply describing your package appropriately.  In general, this
will lead to a more robust and consistent state.</para>
    </listitem>
    <listitem override='bullet'>
<para>Inspect the env to determine where to put things.  For instance, if
the <emphasis remap='B'>npm_config_binroot</emphasis> environ is set to <filename>/home/user/bin</filename>, then
don't try to install executables into <filename>/usr/local/bin</filename>&thinsp;.  The user
probably set it up that way for a reason.</para>
    </listitem>
    <listitem override='bullet'>
<para>Don't prefix your script commands with "sudo".  If root permissions
are required for some reason, then it'll fail with that error, and
the user will sudo the npm command in question.</para>
    </listitem>
    <listitem override='bullet'>
<para>Don't use <emphasis remap='B'>install</emphasis>&thinsp;. Use a <emphasis remap='B'>&thinsp;.gyp</emphasis> file for compilation, and <emphasis remap='B'>prepublish</emphasis>
for anything else. You should almost never have to explicitly set a
preinstall or install script. If you are doing this, please consider if
there is another option. The only valid use of <emphasis remap='B'>install</emphasis> or <emphasis remap='B'>preinstall</emphasis>
scripts is for compilation which must be done on the target architecture.</para>

    </listitem>
  </itemizedlist>
  </blockquote> <!-- remap='RE' -->
</refsect1>

<refsect1 id='see_also'><title>SEE ALSO</title>
  <blockquote remap='RS'>
  <itemizedlist remap='IP+bullet'>
    <listitem override='bullet'>
<para>npm help run-script</para>
    </listitem>
    <listitem override='bullet'>
<para>npm help 5 package.json</para>
    </listitem>
    <listitem override='bullet'>
<para>npm help 7 developers</para>
    </listitem>
    <listitem override='bullet'>
<para>npm help install</para>

    </listitem>
  </itemizedlist>
  </blockquote> <!-- remap='RE' -->
</refsect1>
</refentry>

