<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                   "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!-- lifted from man+troff by doclifter -->
<refentry id='npmshrinkwrap1'>
<refmeta>
<refentrytitle>NPM-SHRINKWRAP</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class='source'>November 2015</refmiscinfo>
</refmeta>
<refnamediv>
<refname>npm-shrinkwrap</refname>
<refpurpose>Lock down dependency versions</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv id='synopsis'>
<para>npm shrinkwrap</para>
</refsynopsisdiv>


<refsect1 id='description'><title>DESCRIPTION</title>
<para>This command locks down the versions of a package's dependencies so
that you can control exactly which versions of each dependency will be
used when your package is installed. The <emphasis remap='B'>package.json</emphasis> file is still
required if you want to use <emphasis remap='B'>npm install</emphasis>&thinsp;.</para>

<para>By default, <emphasis remap='B'>npm install</emphasis> recursively installs the target's
dependencies (as specified in <emphasis remap='B'>package.json</emphasis>), choosing the latest
available version that satisfies the dependency's semver pattern. In
some situations, particularly when shipping software where each change
is tightly managed, it's desirable to fully specify each version of
each dependency recursively so that subsequent builds and deploys do
not inadvertently pick up newer versions of a dependency that satisfy
the semver pattern. Specifying specific semver patterns in each
dependency's <emphasis remap='B'>package.json</emphasis> would facilitate this, but that's not always
possible or desirable, as when another author owns the npm package.
It's also possible to check dependencies directly into source control,
but that may be undesirable for other reasons.</para>

<para>As an example, consider package A:</para>

<literallayout remap='.nf'>
{
  "name": "A",
  "version": "0.1.0",
  "dependencies": {
    "B": "&lt;0.1.0"
  }
}
</literallayout> <!-- .fi -->

<para>package B:</para>

<literallayout remap='.nf'>
{
  "name": "B",
  "version": "0.0.1",
  "dependencies": {
    "C": "&lt;0.1.0"
  }
}
</literallayout> <!-- .fi -->

<para>and package C:</para>

<literallayout remap='.nf'>
{
  "name": "C",
  "version": "0.0.1"
}
</literallayout> <!-- .fi -->

<para>If these are the only versions of A, B, and C available in the
registry, then a normal <emphasis remap='B'>npm install A</emphasis> will install:</para>

<literallayout remap='.nf'>
A@0.1.0
`-- B@0.0.1
    `-- C@0.0.1
</literallayout> <!-- .fi -->

<para>However, if B@0.0.2 is published, then a fresh <emphasis remap='B'>npm install A</emphasis> will
install:</para>

<literallayout remap='.nf'>
A@0.1.0
`-- B@0.0.2
    `-- C@0.0.1
</literallayout> <!-- .fi -->

<para>assuming the new version did not modify B's dependencies. Of course,
the new version of B could include a new version of C and any number
of new dependencies. If such changes are undesirable, the author of A
could specify a dependency on B@0.0.1. However, if A's author and B's
author are not the same person, there's no way for A's author to say
that he or she does not want to pull in newly published versions of C
when B hasn't changed at all.</para>

<para>In this case, A's author can run</para>

<literallayout remap='.nf'>
npm shrinkwrap
</literallayout> <!-- .fi -->

<para>This generates <emphasis remap='B'>npm-shrinkwrap.json</emphasis>, which will look something like this:</para>

<programlisting remap='.nf'>
{
  "name": "A",
  "version": "1.1.0",
  "dependencies": {
    "B": {
      "version": "1.0.1",
      "from": "B@^1.0.0",
      "resolved": "https://registry.npmjs.org/B/-/B-1.0.1.tgz",
      "dependencies": {
        "C": {
          "version": "1.0.1",
          "from": "org/C#v1.0.1",
          "resolved": "git://github.com/org/C.git#5c380ae319fc4efe9e7f2d9c78b0faa588fd99b4"
        }
      }
    }
  }
}
</programlisting> <!-- .fi -->

<para>The shrinkwrap command has locked down the dependencies based on what's
currently installed in <emphasis remap='B'>node_modules</emphasis>&thinsp;.  The installation behavior is changed to:</para>
  <blockquote remap='RS'>
  <variablelist remap='IP'>
    <varlistentry>
    <term>1.</term>
    <listitem>
<para>The module tree described by the shrinkwrap is reproduced. This means
reproducing the structure described in the file, using the specific files
referenced in "resolved" if available, falling back to normal package
resolution using "version" if one isn't.</para>
    </listitem>
    </varlistentry>
    <varlistentry>
    <term>2.</term>
    <listitem>
<para>The tree is walked and any missing dependencies are installed in the usual fashion.</para>

    </listitem>
    </varlistentry>
  </variablelist>
  </blockquote> <!-- remap='RE' -->

<refsect2 id='using_shrinkwrapped_packages'><title>Using shrinkwrapped packages</title>

<para>Using a shrinkwrapped package is no different than using any other
package: you can <emphasis remap='B'>npm install</emphasis> it by hand, or add a dependency to your
<emphasis remap='B'>package.json</emphasis> file and <emphasis remap='B'>npm install</emphasis> it.</para>
</refsect2>

<refsect2 id='building_shrinkwrapped_packages'><title>Building shrinkwrapped packages</title>

<para>To shrinkwrap an existing package:</para>
  <blockquote remap='RS'>
  <variablelist remap='IP'>
    <varlistentry>
    <term>1.</term>
    <listitem>
<para>Run <emphasis remap='B'>npm install</emphasis> in the package root to install the current
versions of all dependencies.</para>
    </listitem>
    </varlistentry>
    <varlistentry>
    <term>2.</term>
    <listitem>
<para>Validate that the package works as expected with these versions.</para>
    </listitem>
    </varlistentry>
    <varlistentry>
    <term>3.</term>
    <listitem>
<para>Run <emphasis remap='B'>npm shrinkwrap</emphasis>, add <emphasis remap='B'>npm-shrinkwrap.json</emphasis> to git, and publish
your package.</para>

    </listitem>
    </varlistentry>
  </variablelist>
  </blockquote> <!-- remap='RE' -->

<para>To add or update a dependency in a shrinkwrapped package:</para>
  <blockquote remap='RS'>
  <variablelist remap='IP'>
    <varlistentry>
    <term>1.</term>
    <listitem>
<para>Run <emphasis remap='B'>npm install</emphasis> in the package root to install the current
versions of all dependencies.</para>
    </listitem>
    </varlistentry>
    <varlistentry>
    <term>2.</term>
    <listitem>
<para>Add or update dependencies. <emphasis remap='B'>npm install --save</emphasis> each new or updated
package individually to update the <emphasis remap='B'>package.json</emphasis> and the shrinkwrap.
Note that they must be explicitly named in order to be installed: running
<emphasis remap='B'>npm install</emphasis> with no arguments will merely reproduce the existing
shrinkwrap.</para>
    </listitem>
    </varlistentry>
    <varlistentry>
    <term>3.</term>
    <listitem>
<para>Validate that the package works as expected with the new
dependencies.</para>
    </listitem>
    </varlistentry>
    <varlistentry>
    <term>4.</term>
    <listitem>
<para>Commit the new <emphasis remap='B'>npm-shrinkwrap.json</emphasis>, and publish your package.</para>

    </listitem>
    </varlistentry>
  </variablelist>
  </blockquote> <!-- remap='RE' -->

<para>You can use npm help outdated to view dependencies with newer versions
available.</para>
</refsect2>

<refsect2 id='other_notes'><title>Other Notes</title>

<para>A shrinkwrap file must be consistent with the package's <emphasis remap='B'>package.json</emphasis>
file. <emphasis remap='B'>npm shrinkwrap</emphasis> will fail if required dependencies are not
already installed, since that would result in a shrinkwrap that
wouldn't actually work. Similarly, the command will fail if there are
extraneous packages (not referenced by <emphasis remap='B'>package.json</emphasis>), since that would
indicate that <emphasis remap='B'>package.json</emphasis> is not correct.</para>

<para>Since <emphasis remap='B'>npm shrinkwrap</emphasis> is intended to lock down your dependencies for
production use, <emphasis remap='B'>devDependencies</emphasis> will not be included unless you
explicitly set the <option>--dev</option> flag when you run <emphasis remap='B'>npm shrinkwrap</emphasis>&thinsp;.  If
installed <emphasis remap='B'>devDependencies</emphasis> are excluded, then npm will print a
warning.  If you want them to be installed with your module by
default, please consider adding them to <emphasis remap='B'>dependencies</emphasis> instead.</para>

<para>If shrinkwrapped package A depends on shrinkwrapped package B, B's
shrinkwrap will not be used as part of the installation of A. However,
because A's shrinkwrap is constructed from a valid installation of B
and recursively specifies all dependencies, the contents of B's
shrinkwrap will implicitly be included in A's shrinkwrap.</para>
</refsect2>

<refsect2 id='caveats'><title>Caveats</title>

<para>If you wish to lock down the specific bytes included in a package, for
example to have 100% confidence in being able to reproduce a
deployment or build, then you ought to check your dependencies into
source control, or pursue some other mechanism that can verify
contents rather than versions.</para>
</refsect2>
</refsect1>

<refsect1 id='see_also'><title>SEE ALSO</title>
  <blockquote remap='RS'>
  <itemizedlist remap='IP+bullet'>
    <listitem override='bullet'>
<para>npm help install</para>
    </listitem>
    <listitem override='bullet'>
<para>npm help 5 package.json</para>
    </listitem>
    <listitem override='bullet'>
<para>npm help ls</para>

    </listitem>
  </itemizedlist>
  </blockquote> <!-- remap='RE' -->
</refsect1>
</refentry>

